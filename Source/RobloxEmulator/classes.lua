
_G.Instance = {}
Instance.AddTag = function(tag :string)
Instance.ClearAllChildren = function()
Instance.Clone = function()
Instance.Destroy = function()
Instance.FindFirstAncestor = function(name :string)
Instance.FindFirstAncestorOfClass = function(className :string)
Instance.FindFirstAncestorWhichIsA = function(className :string)
Instance.FindFirstChild = function(name :string,recursive :bool,)
Instance.FindFirstChildOfClass = function(className :string)
Instance.FindFirstChildWhichIsA = function(className :string,recursive :bool,)
Instance.FindFirstDescendant = function(name :string)
Instance.GetActor = function()
Instance.GetAttribute = function(attribute :string)
Instance.GetAttributeChangedSignal = function(attribute :string)
Instance.GetAttributes = function()
Instance.GetChildren = function()
Instance.GetDebugId = function(scopeLength :int)
Instance.GetDescendants = function()
Instance.GetFullName = function()
Instance.GetPropertyChangedSignal = function(property :string)
Instance.GetTags = function()
Instance.HasTag = function(tag :string)
Instance.IsA = function(className :string)
Instance.IsAncestorOf = function(descendant :Instance)
Instance.IsDescendantOf = function(ancestor :Instance)
Instance.IsPropertyModified = function(name :string)
Instance.Remove = function()
Instance.RemoveTag = function(tag :string)
Instance.ResetPropertyToDefault = function(name :string)
Instance.SetAttribute = function(attribute :string,value :Variant,)
Instance.WaitForChild = function(childName :string,timeOut :double,)
Instance.children = function()
Instance.clone = function()
Instance.destroy = function()
Instance.findFirstChild = function(name :string,recursive :bool,)
Instance.getChildren = function()
Instance.isA = function(className :string)
Instance.isDescendantOf = function(ancestor :Instance)
Instance.remove = function()
_G.AccessoryDescription = {}
AccessoryDescription.Puffiness = 0
_G.AccountService = {}
AccountService.DeviceAccessTokenAvailable = function()
AccountService.DeviceIntegrityAvailable = function()
AccountService.GetDeviceIntegrityToken = function(data :string)
AccountService.GetCredentialsHeaders = function()
AccountService.GetDeviceAccessToken = function()
AccountService.GetDeviceIntegrityTokenYield = function(data :string)
_G.Accoutrement = {}
_G.Accessory = {}
_G.Hat = {}
_G.ActivityHistoryService = {}
_G.AdPortal = {}
AdPortal.TeleportConfirmed = function(placeId :int64,player :Player,)
AdPortal.TeleportRejected = function(shouldCooldown :bool,rejectedByDistance :bool,)
_G.AdService = {}
AdService.GetAdTeleportInfo = function()
AdService.GetReportAdInfo = function()
AdService.HideEudsaDisclosure = function()
AdService.ReturnToPublisherExperience = function(adTeleportMethod :AdTeleportMethod)
AdService.ShowVideoAd = function()
_G.AdvancedDragger = {}
_G.AnalyticsService = {}
AnalyticsService.FireCustomEvent = function(player :Instance,eventCategory :string,customData :Variant,)
AnalyticsService.FireEvent = function(category :string,value :Variant,)
AnalyticsService.FireInGameEconomyEvent = function(player :Instance,itemName :string,economyAction :AnalyticsEconomyAction,itemCategory :string,amount :int,currency :string,location :Variant,customData :Variant,)
AnalyticsService.FireLogEvent = function(player :Instance,logLevel :AnalyticsLogLevel,message :string,debugInfo :Variant,customData :Variant,)
AnalyticsService.FirePlayerProgressionEvent = function(player :Instance,category :string,progressionStatus :AnalyticsProgressionStatus,location :Variant,statistics :Variant,customData :Variant,)
AnalyticsService.LogEconomyEvent = function(player :Player,flowType :AnalyticsEconomyFlowType,currencyType :string,endingBalance :float,amount :float,transactionType :string,itemSku :string,customFields :Array,)
AnalyticsService.LogFunnelStepEvent = function(player :Player,funnelName :string,step :int,customFields :Array,)
AnalyticsService.LogOnboardingFunnelStepEvent = function(player :Player,step :int,customFields :Array,)
AnalyticsService.LogProgressionCompleteEvent = function(player :Player,level :int,levelName :string,customFields :Array,)
AnalyticsService.LogProgressionEvent = function(player :Player,status :AnalyticsProgressionType,level :int,levelName :string,customFields :Array,)
AnalyticsService.LogProgressionFailEvent = function(player :Player,level :int,levelName :string,customFields :Array,)
AnalyticsService.LogProgressionStartEvent = function(player :Player,level :int,levelName :string,customFields :Array,)
_G.Animation = {}
_G.AnimationClip = {}
_G.CurveAnimation = {}
_G.KeyframeSequence = {}
KeyframeSequence.AuthoredHipHeight = 0
KeyframeSequence.AddKeyframe = function(keyframe :Instance)
KeyframeSequence.GetKeyframes = function()
KeyframeSequence.RemoveKeyframe = function(keyframe :Instance)
_G.AnimationClipProvider = {}
AnimationClipProvider.GetAnimationClip = function(assetId :Content)
AnimationClipProvider.GetAnimationClipById = function(assetId :int64,useCache :bool,)
AnimationClipProvider.GetMemStats = function()
AnimationClipProvider.RegisterActiveAnimationClip = function(animationClip :AnimationClip)
AnimationClipProvider.RegisterAnimationClip = function(animationClip :AnimationClip)
AnimationClipProvider.GetAnimationClipAsync = function(assetId :Content)
AnimationClipProvider.GetAnimations = function(userId :int64)
AnimationClipProvider.GetClipEvaluatorAsync = function(assetId :Content)
_G.AnimationController = {}
AnimationController.GetPlayingAnimationTracks = function()
AnimationController.LoadAnimation = function(animation :Animation)
_G.AnimationFromVideoCreatorService = {}
AnimationFromVideoCreatorService.CreateJob = function(filePath :string)
AnimationFromVideoCreatorService.DownloadJobResult = function(jobId :string,outputFilePath :string,)
AnimationFromVideoCreatorService.FullProcess = function(videoFilePath :string,progressCallback :Function,)
AnimationFromVideoCreatorService.GetJobStatus = function(jobId :string)
_G.AnimationFromVideoCreatorStudioService = {}
AnimationFromVideoCreatorStudioService.IsAgeRestricted = function()
AnimationFromVideoCreatorStudioService.CreateAnimationByUploadingVideo = function(progressCallback :Function)
AnimationFromVideoCreatorStudioService.ImportVideoWithPrompt = function()
_G.AnimationRigData = {}
AnimationRigData.LoadFromHumanoid = function(humanoid :Instance)
_G.AnimationStreamTrack = {}
AnimationStreamTrack.WeightCurrent = 0
AnimationStreamTrack.WeightTarget = 0
AnimationStreamTrack.AdjustWeight = function(weight :float,fadeTime :float,)
AnimationStreamTrack.GetTrackerData = function()
AnimationStreamTrack.Play = function(fadeTime :float,weight :float,)
AnimationStreamTrack.Stop = function(fadeTime :float)
AnimationStreamTrack.TogglePause = function(paused :bool)
_G.AnimationTrack = {}
AnimationTrack.Length = 0
AnimationTrack.Speed = 0
AnimationTrack.TimePosition = 0
AnimationTrack.WeightCurrent = 0
AnimationTrack.WeightTarget = 0
AnimationTrack.AdjustSpeed = function(speed :float)
AnimationTrack.AdjustWeight = function(weight :float,fadeTime :float,)
AnimationTrack.GetMarkerReachedSignal = function(name :string)
AnimationTrack.GetTimeOfKeyframe = function(keyframeName :string)
AnimationTrack.Play = function(fadeTime :float,weight :float,speed :float,)
AnimationTrack.Stop = function(fadeTime :float)
_G.Animator = {}
Animator.RootMotionWeight = 0
Animator.ApplyJointVelocities = function(motors :Variant)
Animator.GetPlayingAnimationTracks = function()
Animator.GetPlayingAnimationTracksCoreScript = function()
Animator.LoadAnimation = function(animation :Animation)
Animator.LoadAnimationCoreScript = function(animation :Animation)
Animator.LoadStreamAnimation = function(animation :TrackerStreamAnimation)
Animator.LoadStreamAnimationForSelfieView_deprecated = function(animation :TrackerStreamAnimation,player :Player,)
Animator.RegisterEvaluationParallelCallback = function(callback :Function)
Animator.StepAnimations = function(deltaTime :float)
Animator.SynchronizeWith = function(otherAnimator :Animator)
_G.AppUpdateService = {}
AppUpdateService.CanPerformBinaryUpdate = function()
AppUpdateService.CheckForUpdate = function(handler :Function)
AppUpdateService.DisableDUAR = function()
AppUpdateService.DisableDUARAndOpenSurvey = function(surveyUrl :string)
AppUpdateService.PerformManagedUpdate = function()
_G.AssetCounterService = {}
_G.AssetDeliveryProxy = {}
_G.AssetImportService = {}
AssetImportService.GetAllPresets = function()
AssetImportService.GetPreset = function(name :string)
AssetImportService.RemovePreset = function(name :string)
AssetImportService.SavePreset = function(name :string,preset :Dictionary,)
AssetImportService.StartSessionWithPath = function(filePath :string)
AssetImportService.PickFileWithPrompt = function()
AssetImportService.PickMultipleFilesWithPrompt = function()
AssetImportService.StartSessionWithPrompt = function()
_G.AssetImportSession = {}
AssetImportSession.ApplyPreset = function(preset :Dictionary)
AssetImportSession.ApplySettings = function()
AssetImportSession.Cancel = function()
AssetImportSession.CreatePresetFromData = function(importData :Instance)
AssetImportSession.GetFilename = function()
AssetImportSession.GetImportTree = function()
AssetImportSession.GetRigVisualization = function(importDataInstance :Instance)
AssetImportSession.GetStatuses = function()
AssetImportSession.HasAnimation = function()
AssetImportSession.IsAvatar = function()
AssetImportSession.IsGltf = function()
AssetImportSession.IsR15 = function()
AssetImportSession.Reset = function()
AssetImportSession.Upload = function()
AssetImportSession.usesCustomRestPoseLua = function()
_G.AssetManagerService = {}
AssetManagerService.GetMeshIdFromAliasName = function(aliasName :string)
AssetManagerService.GetMeshIdFromAssetId = function(assetId :int64)
AssetManagerService.GetTextureIdFromAliasName = function(aliasName :string)
AssetManagerService.GetTextureIdFromAssetId = function(assetId :int64)
AssetManagerService.HasUnpublishedChangesForLinkedSource = function(aliasName :string)
AssetManagerService.InsertAudio = function(assetId :int64,assetName :string,)
AssetManagerService.InsertImage = function(assetId :int64)
AssetManagerService.InsertImages = function(assetIds :Array)
AssetManagerService.InsertLinkedSourceAsLocalScript = function(aliasName :string)
AssetManagerService.InsertLinkedSourceAsModuleScript = function(aliasName :string)
AssetManagerService.InsertLinkedSourceAsScript = function(aliasName :string)
AssetManagerService.InsertMesh = function(aliasName :string,insertWithLocation :bool,)
AssetManagerService.InsertMeshesWithLocation = function(aliasNames :Array)
AssetManagerService.InsertModel = function(modelId :int64)
AssetManagerService.InsertPackage = function(packageId :int64)
AssetManagerService.InsertVideo = function(assetId :int64,assetName :string,)
AssetManagerService.OpenLinkedSource = function(aliasName :string)
AssetManagerService.OpenPlace = function(placeId :int64)
AssetManagerService.RefreshLinkedSource = function(aliasName :string)
AssetManagerService.RevertLinkedSourceToLastPublishedVersion = function(aliasName :string)
AssetManagerService.ShowPackageDetails = function(packageId :int64)
AssetManagerService.UpdateAllPackages = function(packageId :int64)
AssetManagerService.ViewPackageOnWebsite = function(packageId :int64)
AssetManagerService.AddNewPlace = function()
AssetManagerService.CreateAlias = function(assetType :int,assetId :int64,aliasName :string,)
AssetManagerService.DeleteAlias = function(aliasName :string)
AssetManagerService.PublishLinkedSource = function(assetId :int64,aliasName :string,)
AssetManagerService.RemovePlace = function(placeId :int64)
AssetManagerService.RenameAlias = function(assetType :int,assetId :int64,oldAliasName :string,newAliasName :string,)
AssetManagerService.RenameModel = function(modelId :int64,newName :string,)
AssetManagerService.RenamePlace = function(placeId :int64,newName :string,)
_G.AssetPatchSettings = {}
_G.AssetService = {}
AssetService.DeserializeInstance = function(serializedInstance :string)
AssetService.GetBundleDetailsSync = function(bundleId :int64)
AssetService.RegisterUGCValidationFunction = function(function :Function)
AssetService.CreateEditableImageAsync = function(textureId :Content)
AssetService.CreateEditableMeshAsync = function(meshId :Content)
AssetService.CreateEditableMeshFromPartAsync = function(meshPart :Instance)
AssetService.CreateEditableMeshStripSkinningAsync = function(meshId :Content)
AssetService.CreateMeshPartAsync = function(meshId :Content,options :Dictionary,)
AssetService.CreatePlaceAsync = function(placeName :string,templatePlaceID :int64,description :string,)
AssetService.CreatePlaceInPlayerInventoryAsync = function(player :Instance,placeName :string,templatePlaceID :int64,description :string,)
AssetService.GetAssetIdsForPackage = function(packageAssetId :int64)
AssetService.GetAudioMetadataAsync = function(idList :Array)
AssetService.GetBundleDetailsAsync = function(bundleId :int64)
AssetService.GetCreatorAssetID = function(creationID :int64)
AssetService.GetGamePlacesAsync = function()
AssetService.PromptCreateAssetAsync = function(player :Player,instance :Instance,assetType :AssetType,)
AssetService.PromptImportAnimationClipFromVideoAsync = function(player :Player,progressCallback :Function,)
AssetService.SavePlaceAsync = function()
AssetService.SearchAudio = function(searchParameters :AudioSearchParams)
_G.Atmosphere = {}
Atmosphere.Density = 0
Atmosphere.Glare = 0
Atmosphere.Haze = 0
Atmosphere.Offset = 0
_G.Attachment = {}
Attachment.GetAxis = function()
Attachment.GetConstraints = function()
Attachment.GetSecondaryAxis = function()
Attachment.SetAxis = function(axis :Vector3)
Attachment.SetSecondaryAxis = function(axis :Vector3)
_G.Bone = {}
_G.AudioAnalyzer = {}
AudioAnalyzer.PeakLevel = 0
AudioAnalyzer.RmsLevel = 0
AudioAnalyzer.GetConnectedWires = function(pin :string)
AudioAnalyzer.GetSpectrum = function()
_G.AudioChorus = {}
AudioChorus.Depth = 0
AudioChorus.Mix = 0
AudioChorus.Rate = 0
AudioChorus.GetConnectedWires = function(pin :string)
_G.AudioCompressor = {}
AudioCompressor.Attack = 0
AudioCompressor.MakeupGain = 0
AudioCompressor.Ratio = 0
AudioCompressor.Release = 0
AudioCompressor.Threshold = 0
AudioCompressor.GetConnectedWires = function(pin :string)
_G.AudioDeviceInput = {}
AudioDeviceInput.GetConnectedWires = function(pin :string)
AudioDeviceInput.GetUserIdAccessList = function()
AudioDeviceInput.SetUserIdAccessList = function(userIds :Array)
_G.AudioDeviceOutput = {}
AudioDeviceOutput.GetConnectedWires = function(pin :string)
_G.AudioDistortion = {}
AudioDistortion.Level = 0
AudioDistortion.GetConnectedWires = function(pin :string)
_G.AudioEcho = {}
AudioEcho.DelayTime = 0
AudioEcho.DryLevel = 0
AudioEcho.Feedback = 0
AudioEcho.WetLevel = 0
AudioEcho.GetConnectedWires = function(pin :string)
_G.AudioEmitter = {}
AudioEmitter.GetAudibilityFor = function(listener :AudioListener)
AudioEmitter.GetConnectedWires = function(pin :string)
AudioEmitter.GetDistanceAttenuation = function()
AudioEmitter.GetInteractingListeners = function()
AudioEmitter.SetDistanceAttenuation = function(curve :Dictionary)
_G.AudioEqualizer = {}
AudioEqualizer.HighGain = 0
AudioEqualizer.LowGain = 0
AudioEqualizer.MidGain = 0
AudioEqualizer.GetConnectedWires = function(pin :string)
_G.AudioFader = {}
AudioFader.Volume = 0
AudioFader.GetConnectedWires = function(pin :string)
_G.AudioFlanger = {}
AudioFlanger.Depth = 0
AudioFlanger.Mix = 0
AudioFlanger.Rate = 0
AudioFlanger.GetConnectedWires = function(pin :string)
_G.AudioListener = {}
AudioListener.GetAudibilityOf = function(emitter :AudioEmitter)
AudioListener.GetConnectedWires = function(pin :string)
AudioListener.GetInteractingEmitters = function()
_G.AudioPitchShifter = {}
AudioPitchShifter.Pitch = 0
AudioPitchShifter.GetConnectedWires = function(pin :string)
_G.AudioPlayer = {}
AudioPlayer.GetConnectedWires = function(pin :string)
AudioPlayer.Play = function()
AudioPlayer.Stop = function()
_G.AudioReverb = {}
AudioReverb.DecayRatio = 0
AudioReverb.DecayTime = 0
AudioReverb.Density = 0
AudioReverb.Diffusion = 0
AudioReverb.DryLevel = 0
AudioReverb.EarlyDelayTime = 0
AudioReverb.HighCutFrequency = 0
AudioReverb.LateDelayTime = 0
AudioReverb.LowShelfFrequency = 0
AudioReverb.LowShelfGain = 0
AudioReverb.ReferenceFrequency = 0
AudioReverb.WetLevel = 0
AudioReverb.GetConnectedWires = function(pin :string)
_G.AudioSearchParams = {}
_G.AvatarChatService = {}
AvatarChatService.IsEnabled = function(mask :int,feature :AvatarChatServiceFeature,)
AvatarChatService.IsPlaceEnabled = function()
AvatarChatService.IsUniverseEnabled = function()
AvatarChatService.PollClientFeatures = function()
AvatarChatService.PollServerFeatures = function()
AvatarChatService.GetClientFeaturesAsync = function()
AvatarChatService.GetServerFeaturesAsync = function()
_G.AvatarCreationService = {}
AvatarCreationService.LoadAvatarModelAsync = function(id :string)
AvatarCreationService.LoadAvatarPreviewImageAsync = function(avatarPreview :string)
AvatarCreationService.PromptCreateAvatarAsync = function(player :Player,humanoidDescription :HumanoidDescription,)
_G.AvatarEditorService = {}
AvatarEditorService.GetAccessoryType = function(avatarAssetType :AvatarAssetType)
AvatarEditorService.NoPromptCreateOutfit = function(humanoidDescription :HumanoidDescription,rigType :HumanoidRigType,name :string,gearAssetId :int64,)
AvatarEditorService.NoPromptDeleteOutfit = function(outfitId :int64)
AvatarEditorService.NoPromptRenameOutfit = function(outfitId :int64,name :string,)
AvatarEditorService.NoPromptSaveAvatar = function(humanoidDescription :HumanoidDescription,rigType :HumanoidRigType,saveDict :Dictionary,gearAssetId :int64,)
AvatarEditorService.NoPromptSaveAvatarThumbnailCustomization = function(thumbnailType :AvatarThumbnailCustomizationType,emoteAssetId :int64,cameraDistanceScale :float,yRotDeg :float,fieldOfViewDeg :float,)
AvatarEditorService.NoPromptSetFavorite = function(itemId :int64,itemType :AvatarItemType,shouldFavorite :bool,)
AvatarEditorService.NoPromptUpdateOutfit = function(outfitId :int64,humanoidDescription :HumanoidDescription,rigType :HumanoidRigType,gearAssetId :int64,)
AvatarEditorService.PerformCreateOutfitWithDescription = function(humanoidDescription :HumanoidDescription,name :string,)
AvatarEditorService.PerformDeleteOutfit = function()
AvatarEditorService.PerformRenameOutfit = function(name :string)
AvatarEditorService.PerformSaveAvatarWithDescription = function(humanoidDescription :HumanoidDescription,addedAssets :Array,removedAssets :Array,)
AvatarEditorService.PerformSetFavorite = function()
AvatarEditorService.PerformUpdateOutfit = function(humanoidDescription :HumanoidDescription)
AvatarEditorService.PromptAllowInventoryReadAccess = function()
AvatarEditorService.PromptCreateOutfit = function(outfit :HumanoidDescription,rigType :HumanoidRigType,)
AvatarEditorService.PromptDeleteOutfit = function(outfitId :int64)
AvatarEditorService.PromptRenameOutfit = function(outfitId :int64)
AvatarEditorService.PromptSaveAvatar = function(humanoidDescription :HumanoidDescription,rigType :HumanoidRigType,)
AvatarEditorService.PromptSetFavorite = function(itemId :int64,itemType :AvatarItemType,shouldFavorite :bool,)
AvatarEditorService.PromptUpdateOutfit = function(outfitId :int64,updatedOutfit :HumanoidDescription,rigType :HumanoidRigType,)
AvatarEditorService.SetAllowInventoryReadAccess = function(inventoryReadAccessGranted :bool)
AvatarEditorService.SignalCreateOutfitFailed = function()
AvatarEditorService.SignalCreateOutfitPermissionDenied = function()
AvatarEditorService.SignalDeleteOutfitFailed = function()
AvatarEditorService.SignalDeleteOutfitPermissionDenied = function()
AvatarEditorService.SignalRenameOutfitFailed = function()
AvatarEditorService.SignalRenameOutfitPermissionDenied = function()
AvatarEditorService.SignalSaveAvatarFailed = function()
AvatarEditorService.SignalSaveAvatarPermissionDenied = function()
AvatarEditorService.SignalSetFavoriteFailed = function()
AvatarEditorService.SignalSetFavoritePermissionDenied = function()
AvatarEditorService.SignalUpdateOutfitFailed = function()
AvatarEditorService.SignalUpdateOutfitPermissionDenied = function()
AvatarEditorService.CheckApplyDefaultClothing = function(humanoidDescription :HumanoidDescription)
AvatarEditorService.ConformToAvatarRules = function(humanoidDescription :HumanoidDescription)
AvatarEditorService.GetAvatarRules = function()
AvatarEditorService.GetBatchItemDetails = function(itemIds :Array,itemType :AvatarItemType,)
AvatarEditorService.GetFavorite = function(itemId :int64,itemType :AvatarItemType,)
AvatarEditorService.GetInventory = function(assetTypes :Array)
AvatarEditorService.GetItemDetails = function(itemId :int64,itemType :AvatarItemType,)
AvatarEditorService.GetOutfitDetails = function(outfitId :int64)
AvatarEditorService.GetOutfits = function(outfitSource :OutfitSource,outfitType :OutfitType,)
AvatarEditorService.GetRecommendedAssets = function(assetType :AvatarAssetType,contextAssetId :int64,)
AvatarEditorService.GetRecommendedBundles = function(bundleId :int64)
AvatarEditorService.SearchCatalog = function(searchParameters :CatalogSearchParams)
_G.AvatarGenerationJob = {}
AvatarGenerationJob.Progress = 0
AvatarGenerationJob.Cancel = function()
AvatarGenerationJob.Wait = function()
_G.Avatar2DGenerationJob = {}
_G.Avatar3DGenerationJob = {}
_G.AvatarGenerationSession = {}
AvatarGenerationSession.GenerateAvatarModel = function(previewJob :Avatar2DGenerationJob,options :Dictionary,)
AvatarGenerationSession.GenerateAvatarPreview = function(textPrompt :string,options :Dictionary,)
_G.AvatarImportService = {}
AvatarImportService.ImportFBXAnimationFromFilePathUserMayChooseModel = function(fbxFilePath :string,selectedRig :Instance,userChooseModelThenImportCB :Function,)
AvatarImportService.ImportFBXAnimationUserMayChooseModel = function(selectedRig :Instance,userChooseModelThenImportCB :Function,)
AvatarImportService.ImportFbxRigWithoutSceneLoad = function(isR15 :bool)
AvatarImportService.ImportLoadedFBXAnimation = function(useFBXModel :bool)
AvatarImportService.LoadRigAndDetectType = function(promptR15Callback :Function)
_G.Backpack = {}
_G.BadgeService = {}
BadgeService.AwardBadge = function(userId :int64,badgeId :int64,)
BadgeService.CheckUserBadgesAsync = function(userId :int64,badgeIds :Array,)
BadgeService.GetBadgeInfoAsync = function(badgeId :int64)
BadgeService.IsDisabled = function(badgeId :int64)
BadgeService.IsLegal = function(badgeId :int64)
BadgeService.UserHasBadge = function(userId :int64,badgeId :int64,)
BadgeService.UserHasBadgeAsync = function(userId :int64,badgeId :int64,)
_G.BaseImportData = {}
BaseImportData.CreatePresetFromData = function()
BaseImportData.GetPreview = function()
BaseImportData.GetStatuses = function()
_G.AnimationImportData = {}
_G.FacsImportData = {}
_G.GroupImportData = {}
_G.JointImportData = {}
_G.MaterialImportData = {}
_G.MeshImportData = {}
MeshImportData.PolygonCount = 0
_G.RootImportData = {}
RootImportData.AnimationIdForRestPose = 0
RootImportData.PolygonCount = 0
_G.BasePlayerGui = {}
BasePlayerGui.GetGuiObjectsAtPosition = function(x :int,y :int,)
BasePlayerGui.GetGuiObjectsInCircle = function(position :Vector2,radius :float,)
_G.CoreGui = {}
CoreGui.SetUserGuiRendering = function(enabled :bool,guiAdornee :Instance,faceId :NormalId,horizontalCurvature :float,)
CoreGui.TakeScreenshot = function()
CoreGui.ToggleRecording = function()
_G.PlayerGui = {}
PlayerGui.GetTopbarTransparency = function()
PlayerGui.SetTopbarTransparency = function(transparency :float)
_G.StarterGui = {}
StarterGui.GetCoreGuiEnabled = function(coreGuiType :CoreGuiType)
StarterGui.RegisterGetCore = function(parameterName :string,getFunction :Function,)
StarterGui.RegisterSetCore = function(parameterName :string,setFunction :Function,)
StarterGui.SetCore = function(parameterName :string,value :Variant,)
StarterGui.SetCoreGuiEnabled = function(coreGuiType :CoreGuiType,enabled :bool,)
StarterGui.GetCore = function(parameterName :string)
_G.BaseRemoteEvent = {}
_G.RemoteEvent = {}
RemoteEvent.FireAllClients = function(arguments :Tuple)
RemoteEvent.FireClient = function(player :Player,arguments :Tuple,)
RemoteEvent.FireServer = function(arguments :Tuple)
_G.UnreliableRemoteEvent = {}
UnreliableRemoteEvent.FireAllClients = function(arguments :Tuple)
UnreliableRemoteEvent.FireClient = function(player :Player,arguments :Tuple,)
UnreliableRemoteEvent.FireServer = function(arguments :Tuple)
_G.BaseWrap = {}
BaseWrap.GetCageOffset = function()
BaseWrap.GetFaces = function(cageType :CageType)
BaseWrap.GetVertices = function(cageType :CageType)
BaseWrap.IsHSRReady = function()
BaseWrap.ModifyVertices = function(cageType :CageType,vertices :Array,)
_G.WrapLayer = {}
WrapLayer.Puffiness = 0
WrapLayer.ShrinkFactor = 0
_G.WrapTarget = {}
WrapTarget.Stiffness = 0
_G.Beam = {}
Beam.Brightness = 0
Beam.CurveSize0 = 0
Beam.CurveSize1 = 0
Beam.LightEmission = 0
Beam.LightInfluence = 0
Beam.TextureLength = 0
Beam.TextureSpeed = 0
Beam.Width0 = 0
Beam.Width1 = 0
Beam.ZOffset = 0
Beam.SetTextureOffset = function(offset :float)
_G.BindableEvent = {}
BindableEvent.Fire = function(arguments :Tuple)
_G.BindableFunction = {}
BindableFunction.Invoke = function(arguments :Tuple)
_G.BodyMover = {}
_G.BodyAngularVelocity = {}
BodyAngularVelocity.P = 0
_G.BodyForce = {}
_G.BodyGyro = {}
BodyGyro.D = 0
BodyGyro.P = 0
_G.BodyPosition = {}
BodyPosition.D = 0
BodyPosition.P = 0
BodyPosition.GetLastForce = function()
BodyPosition.lastForce = function()
_G.BodyThrust = {}
_G.BodyVelocity = {}
BodyVelocity.P = 0
BodyVelocity.GetLastForce = function()
BodyVelocity.lastForce = function()
_G.RocketPropulsion = {}
RocketPropulsion.CartoonFactor = 0
RocketPropulsion.MaxSpeed = 0
RocketPropulsion.MaxThrust = 0
RocketPropulsion.TargetRadius = 0
RocketPropulsion.ThrustD = 0
RocketPropulsion.ThrustP = 0
RocketPropulsion.TurnD = 0
RocketPropulsion.TurnP = 0
RocketPropulsion.Abort = function()
RocketPropulsion.Fire = function()
RocketPropulsion.fire = function()
_G.BodyPartDescription = {}
_G.Breakpoint = {}
_G.BrowserService = {}
BrowserService.CloseBrowserWindow = function()
BrowserService.CopyAuthCookieFromBrowserToEngine = function()
BrowserService.EmitHybridEvent = function(moduleName :string,eventName :string,params :string,)
BrowserService.ExecuteJavaScript = function(javascript :string)
BrowserService.OpenBrowserWindow = function(url :string)
BrowserService.OpenNativeOverlay = function(title :string,url :string,)
BrowserService.OpenWeChatAuthWindow = function()
BrowserService.ReturnToJavaScript = function(callbackId :string,success :bool,params :string,)
BrowserService.SendCommand = function(command :string)
_G.BubbleChatMessageProperties = {}
_G.BulkImportService = {}
BulkImportService.LaunchBulkImport = function(assetTypeToImport :int)
BulkImportService.ShowBulkImportView = function()
_G.CacheableContentProvider = {}
_G.HSRDataContentProvider = {}
_G.MeshContentProvider = {}
MeshContentProvider.GetContentMemoryData = function()
_G.SolidModelContentProvider = {}
_G.CalloutService = {}
CalloutService.AttachCallout = function(definitionId :string,locationId :string,target :Instance,)
CalloutService.DefineCallout = function(definitionId :string,title :string,description :string,learnMoreURL :string,)
CalloutService.DetachCalloutsByDefinitionId = function(definitionId :string)
_G.Camera = {}
Camera.DiagonalFieldOfView = 0
Camera.FieldOfView = 0
Camera.HeadScale = 0
Camera.MaxAxisFieldOfView = 0
Camera.NearPlaneZ = 0
Camera.GetLargestCutoffDistance = function(ignoreList :Objects)
Camera.GetPanSpeed = function()
Camera.GetPartsObscuringTarget = function(castPoints :Array,ignoreList :Objects,)
Camera.GetRenderCFrame = function()
Camera.GetRoll = function()
Camera.GetTiltSpeed = function()
Camera.Interpolate = function(endPos :CFrame,endFocus :CFrame,duration :float,)
Camera.PanUnits = function(units :int)
Camera.ScreenPointToRay = function(x :float,y :float,depth :float,)
Camera.SetCameraPanMode = function(mode :CameraPanMode)
Camera.SetImageServerView = function(modelCoord :CFrame)
Camera.SetRoll = function(rollAngle :float)
Camera.TiltUnits = function(units :int)
Camera.ViewportPointToRay = function(x :float,y :float,depth :float,)
Camera.WorldToScreenPoint = function(worldPoint :Vector3)
Camera.WorldToViewportPoint = function(worldPoint :Vector3)
Camera.Zoom = function(distance :float)
Camera.ZoomToExtents = function(boundingBoxCFrame :CFrame,boundingBoxSize :Vector3,)
_G.CaptureService = {}
CaptureService.CaptureScreenshot = function(onCaptureReady :Function)
CaptureService.DeleteCapture = function(capturePath :string)
CaptureService.OnCaptureBegan = function()
CaptureService.OnCaptureEnded = function()
CaptureService.OnSavePromptFinished = function(promptId :int64,results :Dictionary,)
CaptureService.OnSharePromptFinished = function(promptId :int64,accepted :bool,)
CaptureService.PromptSaveCapturesToGallery = function(contentIds :Array,resultCallback :Function,)
CaptureService.PromptShareCapture = function(contentId :Content,launchData :string,onAcceptedCallback :Function,onDeniedCallback :Function,)
CaptureService.RetrieveCaptures = function()
CaptureService.SaveCaptureToExternalStorage = function(capturePath :string)
CaptureService.SaveScreenshotCapture = function()
CaptureService.DeleteCapturesAsync = function(pathArr :Array)
CaptureService.GetCaptureFilePathAsync = function(captureContentId :Content)
CaptureService.GetCaptureSizeAsync = function(captureContentId :Content)
CaptureService.GetCaptureStorageSizeAsync = function(pathArr :Array)
_G.ChangeHistoryService = {}
ChangeHistoryService.FinishRecording = function(identifier :string,operation :FinishRecordingOperation,finalOptions :Dictionary?,)
ChangeHistoryService.GetCanRedo = function()
ChangeHistoryService.GetCanUndo = function()
ChangeHistoryService.IsRecordingInProgress = function(identifier :string?)
ChangeHistoryService.Redo = function()
ChangeHistoryService.ResetWaypoints = function()
ChangeHistoryService.SetEnabled = function(state :bool)
ChangeHistoryService.SetWaypoint = function(name :string)
ChangeHistoryService.TryBeginRecording = function(name :string,displayName :string?,)
ChangeHistoryService.Undo = function()
_G.CharacterAppearance = {}
_G.BodyColors = {}
_G.CharacterMesh = {}
_G.Clothing = {}
_G.Pants = {}
_G.Shirt = {}
_G.ShirtGraphic = {}
_G.Skin = {}
_G.Chat = {}
Chat.Chat = function(partOrCharacter :Instance,message :string,color :ChatColor,)
Chat.ChatLocal = function(partOrCharacter :Instance,message :string,color :ChatColor,)
Chat.GetShouldUseLuaChat = function()
Chat.InvokeChatCallback = function(callbackType :ChatCallbackType,callbackArguments :Tuple,)
Chat.RegisterChatCallback = function(callbackType :ChatCallbackType,callbackFunction :Function,)
Chat.SetBubbleChatSettings = function(settings :Variant)
Chat.CanUserChatAsync = function(userId :int64)
Chat.CanUsersChatAsync = function(userIdFrom :int64,userIdTo :int64,)
Chat.FilterStringAsync = function(stringToFilter :string,playerFrom :Player,playerTo :Player,)
Chat.FilterStringForBroadcast = function(stringToFilter :string,playerFrom :Player,)
Chat.FilterStringForPlayerAsync = function(stringToFilter :string,playerToFilterFor :Player,)
_G.ChatbotUIService = {}
ChatbotUIService.DisplayContent = function(contentType :string,data :Dictionary,)
ChatbotUIService.GetSettings = function()
_G.ClickDetector = {}
ClickDetector.MaxActivationDistance = 0
_G.DragDetector = {}
DragDetector.MaxDragAngle = 0
DragDetector.MaxForce = 0
DragDetector.MaxTorque = 0
DragDetector.MinDragAngle = 0
DragDetector.Responsiveness = 0
DragDetector.TrackballRadialPullFactor = 0
DragDetector.TrackballRollFactor = 0
DragDetector.AddConstraintFunction = function(priority :int,function :Function,)
DragDetector.GetReferenceFrame = function()
DragDetector.RestartDrag = function()
DragDetector.SetDragStyleFunction = function(function :Function)
DragDetector.SetPermissionPolicyFunction = function(function :Function)
_G.Clouds = {}
Clouds.Cover = 0
Clouds.Density = 0
_G.ClusterPacketCache = {}
_G.Collaborator = {}
_G.CollaboratorsService = {}
CollaboratorsService.GetCollaboratorsList = function()
CollaboratorsService.GetSelectionHighlightsEnabled = function()
CollaboratorsService.RequestFlyToCollaborator = function(collaboratorId :int64)
CollaboratorsService.ToggleSelectionHighlights = function(showHighlights :bool)
CollaboratorsService.ToggleTeamCreate = function(on :bool)
_G.CollectionService = {}
CollectionService.AddTag = function(instance :Instance,tag :string,)
CollectionService.GetAllTags = function()
CollectionService.GetCollection = function(class :string)
CollectionService.GetInstanceAddedSignal = function(tag :string)
CollectionService.GetInstanceRemovedSignal = function(tag :string)
CollectionService.GetTagged = function(tag :string)
CollectionService.GetTags = function(instance :Instance)
CollectionService.HasTag = function(instance :Instance,tag :string,)
CollectionService.RemoveTag = function(instance :Instance,tag :string,)
_G.CommandInstance = {}
CommandInstance.EnableGuiAccess = function(displayName :string,statusTip :string,defaultShortcut :string,)
CommandInstance.RegisterExecutionCallback = function(callbackFunction :Function)
_G.CommandService = {}
CommandService.Execute = function(name :string,params :Variant,)
CommandService.RegisterCommand = function(plugin :Plugin,name :string,context :string,permission :CommandPermission,)
_G.CommerceService = {}
CommerceService.PromptRealWorldCommerceBrowser = function(player :Player,url :string,)
CommerceService.UserEligibleForRealWorldCommerceAsync = function()
_G.Configuration = {}
_G.ConfigureServerService = {}
_G.ConnectivityService = {}
ConnectivityService.IsNetworkStateAvailable = function()
_G.Constraint = {}
Constraint.GetDebugAppliedForce = function(bodyId :int)
Constraint.GetDebugAppliedTorque = function(bodyId :int)
_G.AlignOrientation = {}
AlignOrientation.MaxAngularVelocity = 0
AlignOrientation.MaxTorque = 0
AlignOrientation.Responsiveness = 0
_G.AlignPosition = {}
AlignPosition.MaxForce = 0
AlignPosition.MaxVelocity = 0
AlignPosition.Responsiveness = 0
_G.AngularVelocity = {}
AngularVelocity.MaxTorque = 0
_G.AnimationConstraint = {}
AnimationConstraint.MaxForce = 0
AnimationConstraint.MaxTorque = 0
_G.BallSocketConstraint = {}
BallSocketConstraint.MaxFrictionTorque = 0
BallSocketConstraint.Radius = 0
BallSocketConstraint.Restitution = 0
BallSocketConstraint.TwistLowerAngle = 0
BallSocketConstraint.TwistUpperAngle = 0
BallSocketConstraint.UpperAngle = 0
_G.HingeConstraint = {}
HingeConstraint.AngularResponsiveness = 0
HingeConstraint.AngularSpeed = 0
HingeConstraint.AngularVelocity = 0
HingeConstraint.CurrentAngle = 0
HingeConstraint.LowerAngle = 0
HingeConstraint.MotorMaxAcceleration = 0
HingeConstraint.MotorMaxTorque = 0
HingeConstraint.Radius = 0
HingeConstraint.Restitution = 0
HingeConstraint.ServoMaxTorque = 0
HingeConstraint.TargetAngle = 0
HingeConstraint.UpperAngle = 0
_G.LineForce = {}
LineForce.Magnitude = 0
LineForce.MaxForce = 0
_G.LinearVelocity = {}
LinearVelocity.LineVelocity = 0
LinearVelocity.MaxForce = 0
_G.PlaneConstraint = {}
_G.Plane = {}
_G.RigidConstraint = {}
_G.RodConstraint = {}
RodConstraint.CurrentDistance = 0
RodConstraint.Length = 0
RodConstraint.LimitAngle0 = 0
RodConstraint.LimitAngle1 = 0
RodConstraint.Thickness = 0
_G.RopeConstraint = {}
RopeConstraint.CurrentDistance = 0
RopeConstraint.Length = 0
RopeConstraint.Restitution = 0
RopeConstraint.Thickness = 0
RopeConstraint.WinchForce = 0
RopeConstraint.WinchResponsiveness = 0
RopeConstraint.WinchSpeed = 0
RopeConstraint.WinchTarget = 0
_G.SlidingBallConstraint = {}
SlidingBallConstraint.CurrentPosition = 0
SlidingBallConstraint.LinearResponsiveness = 0
SlidingBallConstraint.LowerLimit = 0
SlidingBallConstraint.MotorMaxAcceleration = 0
SlidingBallConstraint.MotorMaxForce = 0
SlidingBallConstraint.Restitution = 0
SlidingBallConstraint.ServoMaxForce = 0
SlidingBallConstraint.Size = 0
SlidingBallConstraint.Speed = 0
SlidingBallConstraint.TargetPosition = 0
SlidingBallConstraint.UpperLimit = 0
SlidingBallConstraint.Velocity = 0
_G.CylindricalConstraint = {}
CylindricalConstraint.AngularResponsiveness = 0
CylindricalConstraint.AngularRestitution = 0
CylindricalConstraint.AngularSpeed = 0
CylindricalConstraint.AngularVelocity = 0
CylindricalConstraint.CurrentAngle = 0
CylindricalConstraint.InclinationAngle = 0
CylindricalConstraint.LowerAngle = 0
CylindricalConstraint.MotorMaxAngularAcceleration = 0
CylindricalConstraint.MotorMaxTorque = 0
CylindricalConstraint.ServoMaxTorque = 0
CylindricalConstraint.TargetAngle = 0
CylindricalConstraint.UpperAngle = 0
_G.PrismaticConstraint = {}
_G.SpringConstraint = {}
SpringConstraint.Coils = 0
SpringConstraint.CurrentLength = 0
SpringConstraint.Damping = 0
SpringConstraint.FreeLength = 0
SpringConstraint.MaxForce = 0
SpringConstraint.MaxLength = 0
SpringConstraint.MinLength = 0
SpringConstraint.Radius = 0
SpringConstraint.Stiffness = 0
SpringConstraint.Thickness = 0
_G.Torque = {}
_G.TorsionSpringConstraint = {}
TorsionSpringConstraint.Coils = 0
TorsionSpringConstraint.CurrentAngle = 0
TorsionSpringConstraint.Damping = 0
TorsionSpringConstraint.MaxAngle = 0
TorsionSpringConstraint.MaxTorque = 0
TorsionSpringConstraint.Radius = 0
TorsionSpringConstraint.Restitution = 0
TorsionSpringConstraint.Stiffness = 0
_G.UniversalConstraint = {}
UniversalConstraint.MaxAngle = 0
UniversalConstraint.Radius = 0
UniversalConstraint.Restitution = 0
_G.VectorForce = {}
_G.ContentProvider = {}
ContentProvider.CalculateNumTrianglesInMeshSync = function(meshId :string)
ContentProvider.GetAssetFetchStatus = function(contentId :Content)
ContentProvider.GetAssetFetchStatusChangedSignal = function(contentId :Content)
ContentProvider.GetDetailedFailedRequests = function()
ContentProvider.GetFailedRequests = function()
ContentProvider.ListEncryptedAssets = function()
ContentProvider.Preload = function(contentId :Content)
ContentProvider.RegisterDefaultEncryptionKey = function(encryptionKey :string)
ContentProvider.RegisterDefaultSessionKey = function(sessionKey :string)
ContentProvider.RegisterEncryptedAsset = function(assetId :Content,encryptionKey :string,)
ContentProvider.RegisterSessionEncryptedAsset = function(contentId :Content,sessionKey :string,)
ContentProvider.SetBaseUrl = function(url :string)
ContentProvider.UnregisterDefaultEncryptionKey = function()
ContentProvider.UnregisterEncryptedAsset = function(assetId :Content)
ContentProvider.CalculateNumTrianglesInMesh = function(meshId :string)
ContentProvider.PreloadAsync = function(contentIdList :Array,callbackFunction :Function,)
_G.ContextActionService = {}
ContextActionService.BindAction = function(actionName :string,functionToBind :Function,createTouchButton :bool,inputTypes :Tuple,)
ContextActionService.BindActionAtPriority = function(actionName :string,functionToBind :Function,createTouchButton :bool,priorityLevel :int,inputTypes :Tuple,)
ContextActionService.BindActionToInputTypes = function(actionName :string,functionToBind :Function,createTouchButton :bool,inputTypes :Tuple,)
ContextActionService.BindActivate = function(userInputTypeForActivation :UserInputType,keyCodesForActivation :Tuple,)
ContextActionService.BindCoreAction = function(actionName :string,functionToBind :Function,createTouchButton :bool,inputTypes :Tuple,)
ContextActionService.BindCoreActionAtPriority = function(actionName :string,functionToBind :Function,createTouchButton :bool,priorityLevel :int,inputTypes :Tuple,)
ContextActionService.BindCoreActivate = function(userInputTypeForActivation :UserInputType,keyCodesForActivation :Tuple,)
ContextActionService.CallFunction = function(actionName :string,state :UserInputState,inputObject :Instance,)
ContextActionService.FireActionButtonFoundSignal = function(actionName :string,actionButton :Instance,)
ContextActionService.GetAllBoundActionInfo = function()
ContextActionService.GetAllBoundCoreActionInfo = function()
ContextActionService.GetBoundActionInfo = function(actionName :string)
ContextActionService.GetBoundCoreActionInfo = function(actionName :string)
ContextActionService.GetCurrentLocalToolIcon = function()
ContextActionService.SetDescription = function(actionName :string,description :string,)
ContextActionService.SetImage = function(actionName :string,image :string,)
ContextActionService.SetPosition = function(actionName :string,position :UDim2,)
ContextActionService.SetTitle = function(actionName :string,title :string,)
ContextActionService.UnbindAction = function(actionName :string)
ContextActionService.UnbindActivate = function(userInputTypeForActivation :UserInputType,keyCodeForActivation :KeyCode,)
ContextActionService.UnbindAllActions = function()
ContextActionService.UnbindCoreAction = function(actionName :string)
ContextActionService.UnbindCoreActivate = function(userInputTypeForActivation :UserInputType,keyCodeForActivation :KeyCode,)
ContextActionService.GetButton = function(actionName :string)
_G.Controller = {}
Controller.BindButton = function(button :Button,caption :string,)
Controller.GetButton = function(button :Button)
Controller.UnbindButton = function(button :Button)
Controller.bindButton = function(button :Button,caption :string,)
Controller.getButton = function(button :Button)
_G.HumanoidController = {}
_G.SkateboardController = {}
SkateboardController.Steer = 0
SkateboardController.Throttle = 0
_G.VehicleController = {}
_G.ControllerBase = {}
ControllerBase.MoveSpeedFactor = 0
_G.AirController = {}
AirController.BalanceMaxTorque = 0
AirController.BalanceSpeed = 0
AirController.MoveMaxForce = 0
AirController.TurnMaxTorque = 0
AirController.TurnSpeedFactor = 0
_G.ClimbController = {}
ClimbController.AccelerationTime = 0
ClimbController.BalanceMaxTorque = 0
ClimbController.BalanceSpeed = 0
ClimbController.MoveMaxForce = 0
_G.GroundController = {}
GroundController.AccelerationLean = 0
GroundController.AccelerationTime = 0
GroundController.BalanceMaxTorque = 0
GroundController.BalanceSpeed = 0
GroundController.DecelerationTime = 0
GroundController.Friction = 0
GroundController.FrictionWeight = 0
GroundController.GroundOffset = 0
GroundController.StandForce = 0
GroundController.StandSpeed = 0
GroundController.TurnSpeedFactor = 0
_G.SwimController = {}
SwimController.AccelerationTime = 0
SwimController.PitchMaxTorque = 0
SwimController.PitchSpeedFactor = 0
SwimController.RollMaxTorque = 0
SwimController.RollSpeedFactor = 0
_G.ControllerManager = {}
ControllerManager.BaseMoveSpeed = 0
ControllerManager.BaseTurnSpeed = 0
_G.ControllerService = {}
_G.ConversationalAIAcceptanceService = {}
ConversationalAIAcceptanceService.AlternativeAssetSelected = function(requestId :string,previousAssetId :int64,assetId :int64,)
ConversationalAIAcceptanceService.AssetInserted = function(requestId :string,assetId :int64,)
ConversationalAIAcceptanceService.CodeRunnerActivated = function(requestId :string,code :string,)
ConversationalAIAcceptanceService.CodeRunnerCompleted = function(requestId :string,success :bool,errorMessage :string,)
ConversationalAIAcceptanceService.CodeRunnerUndone = function(requestId :string)
ConversationalAIAcceptanceService.DataModelHierarchyLatency = function(requestId :string,latency :double,)
ConversationalAIAcceptanceService.InstanceInserted = function(requestId :string)
ConversationalAIAcceptanceService.RecordingActionEnded = function(requestId :string,waypointName :string,)
_G.CookiesService = {}
_G.CorePackages = {}
_G.CoreScriptDebuggingManagerHelper = {}
_G.CoreScriptSyncService = {}
CoreScriptSyncService.GetScriptFilePath = function(script :Instance)
_G.CreationDBService = {}
_G.CrossDMScriptChangeListener = {}
CrossDMScriptChangeListener.IsWatchingScriptLine = function(scriptRef :string,lineNumber :int,)
CrossDMScriptChangeListener.StartWatchingScriptLine = function(scriptRef :string,debuggerConnectionId :int,lineNumber :int,)
_G.CustomEvent = {}
CustomEvent.GetAttachedReceivers = function()
CustomEvent.SetValue = function(newValue :float)
_G.CustomEventReceiver = {}
CustomEventReceiver.GetCurrentValue = function()
_G.DataModelMesh = {}
_G.BevelMesh = {}
_G.BlockMesh = {}
_G.CylinderMesh = {}
_G.EditableMesh = {}
EditableMesh.AddTriangle = function(vertexId0 :int64,vertexId1 :int64,vertexId2 :int64,)
EditableMesh.AddVertex = function(p :Vector3)
EditableMesh.FindClosestPointOnSurface = function(point :Vector3)
EditableMesh.FindClosestVertex = function(toThisPoint :Vector3)
EditableMesh.FindVerticesWithinSphere = function(center :Vector3,radius :float,)
EditableMesh.GetAdjacentTriangles = function(triangleId :int64)
EditableMesh.GetAdjacentVertices = function(vertexId :int64)
EditableMesh.GetPosition = function(vertexId :int64)
EditableMesh.GetTriangleVertices = function(triangleId :int64)
EditableMesh.GetTriangles = function()
EditableMesh.GetUV = function(vertexId :int64)
EditableMesh.GetVertexColor = function(vertexId :int64)
EditableMesh.GetVertexColorAlpha = function(vertexId :int64)
EditableMesh.GetVertexNormal = function(vertexId :int64)
EditableMesh.GetVertices = function()
EditableMesh.RaycastLocal = function(origin :Vector3,direction :Vector3,)
EditableMesh.RemoveTriangle = function(triangleId :int64)
EditableMesh.RemoveVertex = function(vertexId :int64)
EditableMesh.SetPosition = function(vertexId :int64,p :Vector3,)
EditableMesh.SetUV = function(vertexId :int64,uv :Vector2,)
EditableMesh.SetVertexColor = function(vertexId :int64,color :Color3,)
EditableMesh.SetVertexColorAlpha = function(vertexId :int64,alpha :float,)
EditableMesh.SetVertexNormal = function(vertexId :int64,vnormal :Vector3,)
EditableMesh.CreateMeshPartAsync = function(options :Dictionary)
_G.RobloxEditableMesh = {}
_G.FileMesh = {}
_G.SpecialMesh = {}
_G.DataModelPatchService = {}
DataModelPatchService.GetPatch = function(patchName :string)
DataModelPatchService.RegisterPatch = function(patchName :string,behaviorName :string,localConfigPath :string,userId :int64,)
DataModelPatchService.UpdatePatch = function(userId :int64,patchName :string,callbackFunction :Function,)
_G.DataModelSession = {}
_G.DataStoreGetOptions = {}
_G.DataStoreIncrementOptions = {}
DataStoreIncrementOptions.GetMetadata = function()
DataStoreIncrementOptions.SetMetadata = function(attributes :Dictionary)
_G.DataStoreInfo = {}
_G.DataStoreKey = {}
_G.DataStoreKeyInfo = {}
DataStoreKeyInfo.GetMetadata = function()
DataStoreKeyInfo.GetUserIds = function()
_G.DataStoreObjectVersionInfo = {}
_G.DataStoreOptions = {}
DataStoreOptions.SetExperimentalFeatures = function(experimentalFeatures :Dictionary)
_G.DataStoreService = {}
DataStoreService.GetDataStore = function(name :string,scope :string,options :Instance,)
DataStoreService.GetGlobalDataStore = function()
DataStoreService.GetOrderedDataStore = function(name :string,scope :string,)
DataStoreService.GetRequestBudgetForRequestType = function(requestType :DataStoreRequestType)
DataStoreService.ListDataStoresAsync = function(prefix :string,pageSize :int,cursor :string,)
_G.DataStoreSetOptions = {}
DataStoreSetOptions.GetMetadata = function()
DataStoreSetOptions.SetMetadata = function(attributes :Dictionary)
_G.Debris = {}
Debris.AddItem = function(item :Instance,lifetime :double,)
Debris.SetLegacyMaxItems = function(enabled :bool)
Debris.addItem = function(item :Instance,lifetime :double,)
_G.DebugSettings = {}
_G.DebuggablePluginWatcher = {}
_G.DebuggerBreakpoint = {}
_G.DebuggerConnection = {}
DebuggerConnection.AddBreakpoint = function(script :string,line :int,breakpoint :Breakpoint,)
DebuggerConnection.Close = function()
DebuggerConnection.EvaluateWatch = function(expression :string,frame :StackFrame,callback :Function,)
DebuggerConnection.GetFrameById = function(id :int)
DebuggerConnection.GetSource = function(scriptRef :string,status :Function,)
DebuggerConnection.GetThreadById = function(id :int)
DebuggerConnection.GetThreads = function(callback :Function)
DebuggerConnection.GetVariableById = function(id :int)
DebuggerConnection.Pause = function(thread :ThreadState,status :Function,)
DebuggerConnection.Populate = function(instance :Instance,callback :Function,)
DebuggerConnection.RemoveBreakpoint = function(breakpoint :Breakpoint)
DebuggerConnection.Resume = function(thread :ThreadState,status :Function,)
DebuggerConnection.SetExceptionBreakMode = function(breakMode :DebuggerExceptionBreakMode,callback :Function,)
DebuggerConnection.SetVariable = function(variable :DebuggerVariable,value :string,callback :Function,)
DebuggerConnection.Step = function(thread :ThreadState,callback :Function,)
DebuggerConnection.StepIn = function(thread :ThreadState,callback :Function,)
DebuggerConnection.StepOut = function(thread :ThreadState,callback :Function,)
DebuggerConnection.UpdateSelectedFrame = function(threadId :int,frameNumber :int,)
_G.LocalDebuggerConnection = {}
_G.DebuggerConnectionManager = {}
DebuggerConnectionManager.ConnectLocal = function(dataModel :DataModel)
DebuggerConnectionManager.ConnectRemote = function(host :string,port :int,)
DebuggerConnectionManager.FocusConnection = function(connection :DebuggerConnection)
DebuggerConnectionManager.GetConnectionById = function(id :int)
_G.DebuggerLuaResponse = {}
DebuggerLuaResponse.GetArg = function()
_G.DebuggerManager = {}
DebuggerManager.AddDebugger = function(script :Instance)
DebuggerManager.EnableDebugging = function()
DebuggerManager.GetDebuggers = function()
DebuggerManager.Resume = function()
DebuggerManager.StepIn = function()
DebuggerManager.StepOut = function()
DebuggerManager.StepOver = function()
_G.DebuggerUIService = {}
DebuggerUIService.EditBreakpoint = function(metaBreakpointId :int)
DebuggerUIService.EditWatch = function(expression :string)
DebuggerUIService.IsConnectionForPlayDataModel = function(debuggerConnectionId :int)
DebuggerUIService.OpenExceptionMessagePopup = function(exceptionMessage :string,pausedLine :int,)
DebuggerUIService.OpenScriptAtLine = function(guid :string,debuggerConnectionId :int,line :int,showErrorOnFail :bool,)
DebuggerUIService.Pause = function()
DebuggerUIService.RemoveScriptLineMarkers = function(debuggerConnectionId :int,allMarkers :bool,)
DebuggerUIService.Resume = function()
DebuggerUIService.SetCurrentThreadId = function(debuggerThreadId :int)
DebuggerUIService.SetScriptLineMarker = function(guid :string,debuggerConnectionId :int,line :int,lineMarkerType :bool,)
DebuggerUIService.SetWatchExpressions = function(expressions :Array)
_G.DebuggerVariable = {}
DebuggerVariable.GetVariableByIndex = function(index :int)
DebuggerVariable.GetVariableByName = function(name :string)
_G.DebuggerWatch = {}
_G.DeviceIdService = {}
DeviceIdService.GetDeviceId = function()
_G.Dialog = {}
Dialog.ConversationDistance = 0
Dialog.TriggerDistance = 0
Dialog.GetCurrentPlayers = function()
Dialog.SetPlayerIsUsing = function(player :Instance,isUsing :bool,)
Dialog.SignalDialogChoiceSelected = function(player :Instance,dialogChoice :Instance,)
_G.DialogChoice = {}
_G.DraftsService = {}
DraftsService.DiscardEdits = function(scripts :Objects)
DraftsService.GetDraftStatus = function(script :Instance)
DraftsService.GetEditors = function(script :Instance)
DraftsService.RestoreScripts = function(scripts :Objects)
DraftsService.ShowDiffsAgainstBase = function(scripts :Objects)
DraftsService.ShowDiffsAgainstServer = function(scripts :Objects)
DraftsService.ShowSourceDiffsAgainstCurrent = function(sources :Array,scripts :Objects,)
DraftsService.CommitEdits = function(scripts :Objects)
DraftsService.GetDrafts = function()
DraftsService.UpdateToLatestVersion = function(scripts :Objects)
_G.Dragger = {}
Dragger.AxisRotate = function(axis :Axis)
Dragger.MouseDown = function(mousePart :Instance,pointOnMousePart :Vector3,parts :Objects,)
Dragger.MouseMove = function(mouseRay :Ray)
Dragger.MouseUp = function()
_G.DraggerService = {}
DraggerService.AngleSnapIncrement = 0
DraggerService.HoverAnimateFrequency = 0
DraggerService.HoverThickness = 0
DraggerService.LinearSnapIncrement = 0
_G.EditableImage = {}
EditableImage.Copy = function(min :Vector2,max :Vector2,)
EditableImage.Crop = function(min :Vector2,max :Vector2,)
EditableImage.DrawCircle = function(center :Vector2,radius :int,color :Color3,transparency :float,)
EditableImage.DrawImage = function(position :Vector2,image :EditableImage,combineType :ImageCombineType,)
EditableImage.DrawLine = function(p1 :Vector2,p2 :Vector2,color :Color3,transparency :float,)
EditableImage.DrawProjectionImage = function(mesh :EditableMesh,projection :Dictionary,brushConfig :Dictionary,)
EditableImage.DrawRectangle = function(position :Vector2,size :Vector2,color :Color3,transparency :float,)
EditableImage.ReadPixels = function(position :Vector2,size :Vector2,)
EditableImage.Resize = function(size :Vector2)
EditableImage.Rotate = function(degrees :float,changeSize :bool,)
EditableImage.WritePixels = function(position :Vector2,size :Vector2,pixels :Array,)
_G.RobloxEditableImage = {}
_G.EngineAPICloudProcessingService = {}
_G.EulerRotationCurve = {}
EulerRotationCurve.GetAnglesAtTime = function(time :float)
EulerRotationCurve.GetRotationAtTime = function(time :float)
EulerRotationCurve.X = function()
EulerRotationCurve.Y = function()
EulerRotationCurve.Z = function()
_G.EventIngestService = {}
EventIngestService.SendEventDeferred = function(target :string,eventContext :string,eventName :string,additionalArgs :Dictionary,)
EventIngestService.SendEventImmediately = function(target :string,eventContext :string,eventName :string,additionalArgs :Dictionary,)
EventIngestService.SetRBXEvent = function(target :string,eventContext :string,eventName :string,additionalArgs :Dictionary,)
EventIngestService.SetRBXEventStream = function(target :string,eventContext :string,eventName :string,additionalArgs :Dictionary,)
_G.ExampleService = {}
ExampleService.PrintHello = function()
_G.ExperienceAuthService = {}
ExperienceAuthService.ScopeCheckUIComplete = function(guid :string,scopes :Array,result :ScopeCheckResult,metadata :Dictionary,)
_G.ExperienceInviteOptions = {}
_G.ExperienceNotificationService = {}
ExperienceNotificationService.InvokeOptInPromptClosed = function()
ExperienceNotificationService.PromptOptIn = function()
ExperienceNotificationService.CanPromptOptInAsync = function()
_G.ExperienceService = {}
ExperienceService.GetPendingJoinAttempt = function()
ExperienceService.LaunchExperience = function(params :Dictionary)
ExperienceService.LaunchExperienceFromSource = function(params :Dictionary,source :string,)
ExperienceService.LaunchExperienceFromSourceWithCallback = function(params :Dictionary,source :string,callback :Function,)
ExperienceService.RegisterForExperienceJoin = function(callback :Function)
ExperienceService.RegisterForExperienceLeave = function(callback :Function)
_G.ExperienceStateCaptureService = {}
ExperienceStateCaptureService.CanEnterCaptureMode = function()
ExperienceStateCaptureService.ResetHighlight = function()
ExperienceStateCaptureService.ToggleCaptureMode = function()
_G.Explosion = {}
Explosion.BlastPressure = 0
Explosion.BlastRadius = 0
Explosion.DestroyJointRadiusPercent = 0
Explosion.TimeScale = 0
_G.FaceAnimatorService = {}
FaceAnimatorService.GetTrackerLodController = function()
FaceAnimatorService.Init = function(videoEnabled :bool,audioEnabled :bool,)
FaceAnimatorService.IsStarted = function()
FaceAnimatorService.Start = function()
FaceAnimatorService.Step = function()
FaceAnimatorService.Stop = function()
_G.FaceControls = {}
FaceControls.ChinRaiser = 0
FaceControls.ChinRaiserUpperLip = 0
FaceControls.Corrugator = 0
FaceControls.EyesLookDown = 0
FaceControls.EyesLookLeft = 0
FaceControls.EyesLookRight = 0
FaceControls.EyesLookUp = 0
FaceControls.FlatPucker = 0
FaceControls.Funneler = 0
FaceControls.JawDrop = 0
FaceControls.JawLeft = 0
FaceControls.JawRight = 0
FaceControls.LeftBrowLowerer = 0
FaceControls.LeftCheekPuff = 0
FaceControls.LeftCheekRaiser = 0
FaceControls.LeftDimpler = 0
FaceControls.LeftEyeClosed = 0
FaceControls.LeftEyeUpperLidRaiser = 0
FaceControls.LeftInnerBrowRaiser = 0
FaceControls.LeftLipCornerDown = 0
FaceControls.LeftLipCornerPuller = 0
FaceControls.LeftLipStretcher = 0
FaceControls.LeftLowerLipDepressor = 0
FaceControls.LeftNoseWrinkler = 0
FaceControls.LeftOuterBrowRaiser = 0
FaceControls.LeftUpperLipRaiser = 0
FaceControls.LipPresser = 0
FaceControls.LipsTogether = 0
FaceControls.LowerLipSuck = 0
FaceControls.MouthLeft = 0
FaceControls.MouthRight = 0
FaceControls.Pucker = 0
FaceControls.RightBrowLowerer = 0
FaceControls.RightCheekPuff = 0
FaceControls.RightCheekRaiser = 0
FaceControls.RightDimpler = 0
FaceControls.RightEyeClosed = 0
FaceControls.RightEyeUpperLidRaiser = 0
FaceControls.RightInnerBrowRaiser = 0
FaceControls.RightLipCornerDown = 0
FaceControls.RightLipCornerPuller = 0
FaceControls.RightLipStretcher = 0
FaceControls.RightLowerLipDepressor = 0
FaceControls.RightNoseWrinkler = 0
FaceControls.RightOuterBrowRaiser = 0
FaceControls.RightUpperLipRaiser = 0
FaceControls.TongueDown = 0
FaceControls.TongueOut = 0
FaceControls.TongueUp = 0
FaceControls.UpperLipSuck = 0
_G.FaceInstance = {}
_G.Decal = {}
Decal.LocalTransparencyModifier = 0
Decal.Shiny = 0
Decal.Specular = 0
Decal.Transparency = 0
_G.Texture = {}
Texture.OffsetStudsU = 0
Texture.OffsetStudsV = 0
Texture.StudsPerTileU = 0
Texture.StudsPerTileV = 0
_G.FacialAnimationRecordingService = {}
FacialAnimationRecordingService.IsAgeRestricted = function()
FacialAnimationRecordingService.CheckOrRequestCameraPermission = function()
_G.FacialAnimationStreamingServiceStats = {}
FacialAnimationStreamingServiceStats.Get = function(label :string)
FacialAnimationStreamingServiceStats.GetWithPlayerId = function(label :string,playerId :int64,)
_G.FacialAnimationStreamingServiceV2 = {}
FacialAnimationStreamingServiceV2.GetStats = function()
FacialAnimationStreamingServiceV2.IsAudioEnabled = function(mask :int)
FacialAnimationStreamingServiceV2.IsPlaceEnabled = function(mask :int)
FacialAnimationStreamingServiceV2.IsServerEnabled = function(mask :int)
FacialAnimationStreamingServiceV2.IsVideoEnabled = function(mask :int)
FacialAnimationStreamingServiceV2.ResolveStateForUser = function(userId :int64)
_G.FacialAnimationStreamingSubsessionStats = {}
_G.Feature = {}
_G.Hole = {}
_G.MotorFeature = {}
_G.File = {}
File.GetBinaryContents = function()
File.GetTemporaryId = function()
_G.Fire = {}
Fire.Heat = 0
Fire.Size = 0
Fire.TimeScale = 0
Fire.size = 0
Fire.FastForward = function(numFrames :int)
_G.FlagStandService = {}
_G.FloatCurve = {}
FloatCurve.GetKeyAtIndex = function(index :int)
FloatCurve.GetKeyIndicesAtTime = function(time :float)
FloatCurve.GetKeys = function()
FloatCurve.GetValueAtTime = function(time :float)
FloatCurve.InsertKey = function(key :FloatCurveKey)
FloatCurve.RemoveKeyAtIndex = function(startingIndex :int,count :int,)
FloatCurve.SetKeys = function(keys :Array)
_G.FlyweightService = {}
_G.CSGDictionaryService = {}
_G.NonReplicatedCSGDictionaryService = {}
_G.Folder = {}
_G.ForceField = {}
_G.FriendService = {}
FriendService.GetPlatformFriends = function()
_G.FunctionalTest = {}
FunctionalTest.Error = function(message :string)
FunctionalTest.Failed = function(message :string)
FunctionalTest.Pass = function(message :string)
FunctionalTest.Passed = function(message :string)
FunctionalTest.Warn = function(message :string)
_G.GamePassService = {}
GamePassService.PlayerHasPass = function(player :Player,gamePassId :int64,)
_G.GameSettings = {}
_G.GamepadService = {}
GamepadService.DisableGamepadCursor = function()
GamepadService.EnableGamepadCursor = function(guiObject :Instance)
GamepadService.GetGamepadCursorPosition = function()
GamepadService.SetGamepadCursorPosition = function(position :Vector2)
_G.Geometry = {}
_G.GeometryService = {}
GeometryService.CalculateConstraintsToPreserve = function(source :Instance,destination :Array,options :Dictionary,)
GeometryService.HashMeshAsync = function(meshId :Content)
GeometryService.IntersectAsync = function(part :Instance,parts :Array,options :Dictionary,)
GeometryService.StitchMeshesAsync = function(meshParts :Array)
GeometryService.SubtractAsync = function(part :Instance,parts :Array,options :Dictionary,)
GeometryService.UnionAsync = function(part :Instance,parts :Array,options :Dictionary,)
_G.GetTextBoundsParams = {}
GetTextBoundsParams.Size = 0
GetTextBoundsParams.Width = 0
_G.GlobalDataStore = {}
GlobalDataStore.OnUpdate = function(key :string,callback :Function,)
GlobalDataStore.GetAsync = function(key :string,options :DataStoreGetOptions,)
GlobalDataStore.IncrementAsync = function(key :string,delta :int,userIds :Array,options :DataStoreIncrementOptions,)
GlobalDataStore.RemoveAsync = function(key :string)
GlobalDataStore.SetAsync = function(key :string,value :Variant,userIds :Array,options :DataStoreSetOptions,)
GlobalDataStore.UpdateAsync = function(key :string,transformFunction :Function,)
_G.DataStore = {}
DataStore.GetVersionAsync = function(key :string,version :string,)
DataStore.ListKeysAsync = function(prefix :string,pageSize :int,cursor :string,excludeDeleted :bool,)
DataStore.ListVersionsAsync = function(key :string,sortDirection :SortDirection,minDate :int64,maxDate :int64,pageSize :int,)
DataStore.RemoveVersionAsync = function(key :string,version :string,)
_G.OrderedDataStore = {}
OrderedDataStore.GetSortedAsync = function(ascending :bool,pagesize :int,minValue :Variant,maxValue :Variant,)
_G.GoogleAnalyticsConfiguration = {}
_G.GroupService = {}
GroupService.GetAlliesAsync = function(groupId :int64)
GroupService.GetEnemiesAsync = function(groupId :int64)
GroupService.GetGroupInfoAsync = function(groupId :int64)
GroupService.GetGroupsAsync = function(userId :int64)
_G.GuiBase = {}
_G.GuiBase2d = {}
GuiBase2d.AbsoluteRotation = 0
GuiBase2d.TotalGroupScale = 0
_G.GuiObject = {}
GuiObject.BackgroundTransparency = 0
GuiObject.Rotation = 0
GuiObject.Transparency = 0
GuiObject.TweenPosition = function(endPosition :UDim2,easingDirection :EasingDirection,easingStyle :EasingStyle,time :float,override :bool,callback :Function,)
GuiObject.TweenSize = function(endSize :UDim2,easingDirection :EasingDirection,easingStyle :EasingStyle,time :float,override :bool,callback :Function,)
GuiObject.TweenSizeAndPosition = function(endSize :UDim2,endPosition :UDim2,easingDirection :EasingDirection,easingStyle :EasingStyle,time :float,override :bool,callback :Function,)
_G.CanvasGroup = {}
CanvasGroup.GroupTransparency = 0
_G.Frame = {}
_G.GuiButton = {}
_G.ImageButton = {}
ImageButton.ImageTransparency = 0
ImageButton.SliceScale = 0
ImageButton.SetEnableContentImageSizeChangedEvents = function(enabled :bool)
_G.TextButton = {}
TextButton.LineHeight = 0
TextButton.TextSize = 0
TextButton.TextStrokeTransparency = 0
TextButton.TextTransparency = 0
TextButton.SetTextFromInput = function(text :string)
_G.GuiLabel = {}
_G.ImageLabel = {}
ImageLabel.ImageTransparency = 0
ImageLabel.SliceScale = 0
ImageLabel.SetEnableContentImageSizeChangedEvents = function(enabled :bool)
_G.TextLabel = {}
TextLabel.LineHeight = 0
TextLabel.TextSize = 0
TextLabel.TextStrokeTransparency = 0
TextLabel.TextTransparency = 0
TextLabel.SetTextFromInput = function(text :string)
_G.ScrollingFrame = {}
ScrollingFrame.ScrollBarImageTransparency = 0
ScrollingFrame.ClearInertialScrolling = function()
ScrollingFrame.GetSampledInertialVelocity = function()
ScrollingFrame.ScrollToTop = function()
_G.TextBox = {}
TextBox.LineHeight = 0
TextBox.TextSize = 0
TextBox.TextStrokeTransparency = 0
TextBox.TextTransparency = 0
TextBox.CaptureFocus = function()
TextBox.IsFocused = function()
TextBox.ReleaseFocus = function(submitted :bool)
TextBox.ResetKeyboardMode = function()
TextBox.SetTextFromInput = function(text :string)
_G.VideoFrame = {}
VideoFrame.Volume = 0
VideoFrame.Pause = function()
VideoFrame.Play = function()
VideoFrame.SetStudioPreview = function(isPreview :bool)
_G.ViewportFrame = {}
ViewportFrame.ImageTransparency = 0
ViewportFrame.CaptureSnapshotAsync = function()
_G.LayerCollector = {}
LayerCollector.GetLayoutNodeTree = function()
_G.BillboardGui = {}
BillboardGui.Brightness = 0
BillboardGui.CurrentDistance = 0
BillboardGui.DistanceLowerLimit = 0
BillboardGui.DistanceStep = 0
BillboardGui.DistanceUpperLimit = 0
BillboardGui.LightInfluence = 0
BillboardGui.MaxDistance = 0
BillboardGui.GetScreenSpaceBounds = function()
_G.PluginGui = {}
PluginGui.BindToClose = function(function :Function)
PluginGui.GetRelativeMousePosition = function()
_G.DockWidgetPluginGui = {}
DockWidgetPluginGui.RequestRaise = function()
_G.QWidgetPluginGui = {}
_G.ScreenGui = {}
_G.GuiMain = {}
_G.SurfaceGuiBase = {}
_G.AdGui = {}
_G.SurfaceGui = {}
SurfaceGui.Brightness = 0
SurfaceGui.HorizontalCurvature = 0
SurfaceGui.LightInfluence = 0
SurfaceGui.MaxDistance = 0
SurfaceGui.PixelsPerStud = 0
SurfaceGui.ToolPunchThroughDistance = 0
SurfaceGui.ZOffset = 0
_G.GuiBase3d = {}
GuiBase3d.Transparency = 0
_G.FloorWire = {}
FloorWire.CycleOffset = 0
FloorWire.StudsBetweenTextures = 0
FloorWire.Velocity = 0
FloorWire.WireRadius = 0
_G.InstanceAdornment = {}
_G.SelectionBox = {}
SelectionBox.LineThickness = 0
SelectionBox.SurfaceTransparency = 0
_G.PVAdornment = {}
_G.HandleAdornment = {}
_G.BoxHandleAdornment = {}
_G.ConeHandleAdornment = {}
ConeHandleAdornment.Height = 0
ConeHandleAdornment.Radius = 0
_G.CylinderHandleAdornment = {}
CylinderHandleAdornment.Angle = 0
CylinderHandleAdornment.Height = 0
CylinderHandleAdornment.InnerRadius = 0
CylinderHandleAdornment.Radius = 0
_G.ImageHandleAdornment = {}
_G.LineHandleAdornment = {}
LineHandleAdornment.Length = 0
LineHandleAdornment.Thickness = 0
_G.SphereHandleAdornment = {}
SphereHandleAdornment.Radius = 0
_G.WireframeHandleAdornment = {}
WireframeHandleAdornment.AddLine = function(from :Vector3,to :Vector3,)
WireframeHandleAdornment.AddLines = function(points :Array)
WireframeHandleAdornment.AddPath = function(points :Array,loop :bool,)
WireframeHandleAdornment.AddText = function(point :Vector3,text :string,size :int,)
WireframeHandleAdornment.Clear = function()
_G.ParabolaAdornment = {}
ParabolaAdornment.A = 0
ParabolaAdornment.B = 0
ParabolaAdornment.C = 0
ParabolaAdornment.Range = 0
ParabolaAdornment.Thickness = 0
ParabolaAdornment.FindPartOnParabola = function(ignoreDescendentsTable :Objects)
_G.SelectionSphere = {}
SelectionSphere.SurfaceTransparency = 0
_G.PartAdornment = {}
_G.HandlesBase = {}
_G.ArcHandles = {}
_G.Handles = {}
_G.SurfaceSelection = {}
_G.SelectionLasso = {}
_G.SelectionPartLasso = {}
_G.SelectionPointLasso = {}
_G.Path2D = {}
Path2D.Thickness = 0
Path2D.Transparency = 0
Path2D.GetBoundingRect = function()
Path2D.GetControlPoint = function(index :int)
Path2D.GetControlPoints = function()
Path2D.GetLength = function()
Path2D.GetPositionOnCurve = function(t :float)
Path2D.GetPositionOnCurveArcLength = function(t :float)
Path2D.GetSegmentCount = function()
Path2D.GetTangentOnCurve = function(t :float)
Path2D.GetTangentOnCurveArcLength = function(t :float)
Path2D.InsertControlPoint = function(index :int,point :Path2DControlPoint,)
Path2D.RemoveControlPoint = function(index :int)
Path2D.SetControlPoints = function(controlPoints :Array)
Path2D.UpdateControlPoint = function(index :int,point :Path2DControlPoint,)
_G.GuiService = {}
GuiService.PreferredTransparency = 0
GuiService.AddCenterDialog = function(dialog :Instance,centerDialogType :CenterDialogType,showFunction :Function,hideFunction :Function,)
GuiService.AddKey = function(key :string)
GuiService.AddSelectionParent = function(selectionName :string,selectionParent :Instance,)
GuiService.AddSelectionTuple = function(selectionName :string,selections :Tuple,)
GuiService.AddSpecialKey = function(key :SpecialKey)
GuiService.BroadcastNotification = function(data :string,notificationType :int,)
GuiService.ClearError = function()
GuiService.CloseInspectMenu = function()
GuiService.CloseStatsBasedOnInputString = function(input :string)
GuiService.ForceTenFootInterface = function(isForced :bool)
GuiService.GetBrickCount = function()
GuiService.GetClosestDialogToPosition = function(position :Vector3)
GuiService.GetEmotesMenuOpen = function()
GuiService.GetErrorCode = function()
GuiService.GetErrorMessage = function()
GuiService.GetErrorType = function()
GuiService.GetGameplayPausedNotificationEnabled = function()
GuiService.GetGuiInset = function()
GuiService.GetGuiIsVisible = function(guiType :GuiType)
GuiService.GetHardwareSafeViewport = function()
GuiService.GetInspectMenuEnabled = function()
GuiService.GetNotificationTypeList = function()
GuiService.GetResolutionScale = function()
GuiService.GetSafeZoneOffsets = function()
GuiService.GetUiMessage = function()
GuiService.InspectPlayerFromHumanoidDescription = function(humanoidDescription :Instance,name :string,)
GuiService.InspectPlayerFromUserId = function(userId :int64)
GuiService.InspectPlayerFromUserIdWithCtx = function(userId :int64,ctx :string,)
GuiService.IsMemoryTrackerEnabled = function()
GuiService.IsTenFootInterface = function()
GuiService.OpenBrowserWindow = function(url :string)
GuiService.OpenNativeOverlay = function(title :string,url :string,)
GuiService.RemoveCenterDialog = function(dialog :Instance)
GuiService.RemoveKey = function(key :string)
GuiService.RemoveSelectionGroup = function(selectionName :string)
GuiService.RemoveSpecialKey = function(key :SpecialKey)
GuiService.Select = function(selectionParent :Instance)
GuiService.SendUIOcclusionMetricsForQueryRegion = function(position :UDim2,size :UDim2,regionName :string,)
GuiService.SetEmotesMenuOpen = function(isOpen :bool)
GuiService.SetGameplayPausedNotificationEnabled = function(enabled :bool)
GuiService.SetGlobalGuiInset = function(x1 :int,y1 :int,x2 :int,y2 :int,)
GuiService.SetHardwareSafeAreaInsets = function(left :float,top :float,right :float,bottom :float,)
GuiService.SetInspectMenuEnabled = function(enabled :bool)
GuiService.SetMenuIsOpen = function(open :bool,menuName :string,)
GuiService.SetPurchasePromptIsShown = function(isShown :bool)
GuiService.SetSafeZoneOffsets = function(top :float,bottom :float,left :float,right :float,)
GuiService.SetTopbarInset = function(topbarInset :Rect)
GuiService.SetUiMessage = function(msgType :UiMessageType,uiMessage :string,)
GuiService.ShowStatsBasedOnInputString = function(input :string)
GuiService.ToggleFullscreen = function()
GuiService.ToggleGuiIsVisibleForCaptures = function(guiType :GuiType)
GuiService.ToggleGuiIsVisibleIfAllowed = function(guiType :GuiType)
GuiService.GetScreenResolution = function()
_G.GuidRegistryService = {}
_G.HapticService = {}
HapticService.GetMotor = function(inputType :UserInputType,vibrationMotor :VibrationMotor,)
HapticService.IsMotorSupported = function(inputType :UserInputType,vibrationMotor :VibrationMotor,)
HapticService.IsVibrationSupported = function(inputType :UserInputType)
HapticService.SetMotor = function(inputType :UserInputType,vibrationMotor :VibrationMotor,vibrationValues :Tuple,)
_G.HeightmapImporterService = {}
HeightmapImporterService.CancelImportHeightmap = function()
HeightmapImporterService.IsValidColormap = function(colormapAssetId :Content)
HeightmapImporterService.IsValidHeightmap = function(heightmapAssetId :Content)
HeightmapImporterService.SetImportHeightmapPaused = function(paused :bool)
HeightmapImporterService.GetHeightmapPreviewAsync = function(heightmapAssetId :Content)
HeightmapImporterService.ImportHeightmap = function(region :Region3,heightmapAssetId :Content,colormapAssetId :Content,defaultMaterial :Material,)
_G.HiddenSurfaceRemovalAsset = {}
_G.Highlight = {}
Highlight.FillTransparency = 0
Highlight.OutlineTransparency = 0
_G.Hopper = {}
_G.HttpRbxApiService = {}
HttpRbxApiService.GetDocumentationUrl = function(partialUrl :string)
HttpRbxApiService.GetAsync = function(apiUrlPath :string,priority :ThrottlingPriority,httpRequestType :HttpRequestType,)
HttpRbxApiService.GetAsyncFullUrl = function(apiUrl :string,priority :ThrottlingPriority,httpRequestType :HttpRequestType,)
HttpRbxApiService.PostAsync = function(apiUrlPath :string,data :string,priority :ThrottlingPriority,content_type :HttpContentType,httpRequestType :HttpRequestType,)
HttpRbxApiService.PostAsyncFullUrl = function(apiUrl :string,data :string,priority :ThrottlingPriority,content_type :HttpContentType,httpRequestType :HttpRequestType,)
HttpRbxApiService.RequestAsync = function(requestOptions :Dictionary,priority :ThrottlingPriority,content_type :HttpContentType,httpRequestType :HttpRequestType,)
HttpRbxApiService.RequestLimitedAsync = function(requestOptions :Dictionary,priority :ThrottlingPriority,content_type :HttpContentType,httpRequestType :HttpRequestType,)
_G.HttpRequest = {}
HttpRequest.Cancel = function()
HttpRequest.Start = function(callback :Function)
_G.HttpService = {}
HttpService.GenerateGUID = function(wrapInCurlyBraces :bool)
HttpService.GetHttpEnabled = function()
HttpService.GetSecret = function(key :string)
HttpService.GetUserAgent = function()
HttpService.JSONDecode = function(input :string)
HttpService.JSONEncode = function(input :Variant)
HttpService.RequestInternal = function(options :Dictionary)
HttpService.SetHttpEnabled = function(enabled :bool)
HttpService.UrlEncode = function(input :string)
HttpService.GetAsync = function(url :string,nocache :bool,headers :Variant,)
HttpService.PostAsync = function(url :string,data :string,content_type :HttpContentType,compress :bool,headers :Variant,)
HttpService.RequestAsync = function(requestOptions :Dictionary)
_G.Humanoid = {}
Humanoid.Health = 0
Humanoid.HealthDisplayDistance = 0
Humanoid.HipHeight = 0
Humanoid.JumpHeight = 0
Humanoid.JumpPower = 0
Humanoid.MaxHealth = 0
Humanoid.MaxSlopeAngle = 0
Humanoid.NameDisplayDistance = 0
Humanoid.WalkSpeed = 0
Humanoid.maxHealth = 0
Humanoid.AddAccessory = function(accessory :Instance)
Humanoid.AddCustomStatus = function(status :string)
Humanoid.AddStatus = function(status :Status)
Humanoid.BuildRigFromAttachments = function()
Humanoid.CacheDefaults = function()
Humanoid.ChangeState = function(state :HumanoidStateType)
Humanoid.EquipTool = function(tool :Instance)
Humanoid.GetAccessories = function()
Humanoid.GetAccessoryHandleScale = function(instance :Instance,partType :BodyPartR15,)
Humanoid.GetAppliedDescription = function()
Humanoid.GetBodyPartR15 = function(part :Instance)
Humanoid.GetLimb = function(part :Instance)
Humanoid.GetMoveVelocity = function()
Humanoid.GetPlayingAnimationTracks = function()
Humanoid.GetState = function()
Humanoid.GetStateEnabled = function(state :HumanoidStateType)
Humanoid.GetStatuses = function()
Humanoid.HasCustomStatus = function(status :string)
Humanoid.HasStatus = function(status :Status)
Humanoid.LoadAnimation = function(animation :Animation)
Humanoid.Move = function(moveDirection :Vector3,relativeToCamera :bool,)
Humanoid.MoveTo = function(location :Vector3,part :Instance,)
Humanoid.RemoveAccessories = function()
Humanoid.RemoveCustomStatus = function(status :string)
Humanoid.RemoveStatus = function(status :Status)
Humanoid.ReplaceBodyPartR15 = function(bodyPart :BodyPartR15,part :BasePart,)
Humanoid.SetClickToWalkEnabled = function(enabled :bool)
Humanoid.SetStateEnabled = function(state :HumanoidStateType,enabled :bool,)
Humanoid.TakeDamage = function(amount :float)
Humanoid.UnequipTools = function()
Humanoid.loadAnimation = function(animation :Animation)
Humanoid.takeDamage = function(amount :float)
Humanoid.ApplyDescription = function(humanoidDescription :HumanoidDescription,assetTypeVerification :AssetTypeVerification,)
Humanoid.ApplyDescriptionClientServer = function(humanoidDescription :HumanoidDescription)
Humanoid.ApplyDescriptionReset = function(humanoidDescription :HumanoidDescription,assetTypeVerification :AssetTypeVerification,)
Humanoid.PlayEmote = function(emoteName :string)
Humanoid.PlayEmoteAndGetAnimTrackById = function(emoteId :int64)
_G.HumanoidDescription = {}
HumanoidDescription.BodyTypeScale = 0
HumanoidDescription.DepthScale = 0
HumanoidDescription.HeadScale = 0
HumanoidDescription.HeightScale = 0
HumanoidDescription.ProportionScale = 0
HumanoidDescription.WidthScale = 0
HumanoidDescription.AddEmote = function(name :string,assetId :int64,)
HumanoidDescription.GetAccessories = function(includeRigidAccessories :bool)
HumanoidDescription.GetEmotes = function()
HumanoidDescription.GetEquippedEmotes = function()
HumanoidDescription.RemoveEmote = function(name :string)
HumanoidDescription.SetAccessories = function(accessories :Array,includeRigidAccessories :bool,)
HumanoidDescription.SetEmotes = function(emotes :Dictionary)
HumanoidDescription.SetEquippedEmotes = function(equippedEmotes :Array)
_G.IKControl = {}
IKControl.SmoothTime = 0
IKControl.Weight = 0
IKControl.GetChainCount = function()
IKControl.GetChainLength = function()
IKControl.GetNodeLocalCFrame = function(index :int)
IKControl.GetNodeWorldCFrame = function(index :int)
IKControl.GetRawFinalTarget = function()
IKControl.GetSmoothedFinalTarget = function()
_G.ILegacyStudioBridge = {}
_G.LegacyStudioBridge = {}
_G.IXPService = {}
IXPService.ClearUserLayers = function()
IXPService.GetBrowserTrackerLayerLoadingStatus = function()
IXPService.GetBrowserTrackerLayerVariables = function(layerName :string)
IXPService.GetBrowserTrackerStatusForLayer = function(layerName :string)
IXPService.GetRegisteredUserLayersToStatus = function()
IXPService.GetUserLayerLoadingStatus = function()
IXPService.GetUserLayerVariables = function(layerName :string)
IXPService.GetUserStatusForLayer = function(layerName :string)
IXPService.InitializeUserLayers = function(userId :int64)
IXPService.LogBrowserTrackerLayerExposure = function(layerName :string)
IXPService.LogUserLayerExposure = function(layerName :string)
IXPService.RegisterUserLayers = function(userLayers :Variant)
_G.IncrementalPatchBuilder = {}
_G.InputObject = {}
InputObject.IsModifierKeyDown = function(modifierKey :ModifierKey)
_G.InsertService = {}
InsertService.ApproveAssetId = function(assetId :int64)
InsertService.ApproveAssetVersionId = function(assetVersionId :int64)
InsertService.GetLocalFileContents = function(contentId :string)
InsertService.Insert = function(instance :Instance)
InsertService.LoadLocalAsset = function(assetPath :string)
InsertService.LoadPackageAsset = function(url :Content)
InsertService.CreateMeshPartAsync = function(meshId :Content,collisionFidelity :CollisionFidelity,renderFidelity :RenderFidelity,)
InsertService.GetBaseCategories = function()
InsertService.GetBaseSets = function()
InsertService.GetCollection = function(categoryId :int64)
InsertService.GetFreeDecals = function(searchText :string,pageNum :int,)
InsertService.GetFreeModels = function(searchText :string,pageNum :int,)
InsertService.GetLatestAssetVersionAsync = function(assetId :int64)
InsertService.GetUserCategories = function(userId :int64)
InsertService.GetUserSets = function(userId :int64)
InsertService.LoadAsset = function(assetId :int64)
InsertService.LoadAssetVersion = function(assetVersionId :int64)
InsertService.LoadAssetWithFormat = function(assetId :int64,format :string,)
InsertService.LoadPackageAssetAsync = function(url :Content)
InsertService.loadAsset = function(assetId :int64)
_G.JointInstance = {}
_G.DynamicRotate = {}
DynamicRotate.BaseAngle = 0
_G.RotateP = {}
_G.RotateV = {}
_G.Glue = {}
_G.ManualSurfaceJointInstance = {}
_G.ManualGlue = {}
_G.ManualWeld = {}
_G.Motor = {}
Motor.CurrentAngle = 0
Motor.DesiredAngle = 0
Motor.MaxVelocity = 0
Motor.SetDesiredAngle = function(value :float)
_G.Motor6D = {}
_G.Rotate = {}
_G.Snap = {}
_G.VelocityMotor = {}
VelocityMotor.CurrentAngle = 0
VelocityMotor.DesiredAngle = 0
VelocityMotor.MaxVelocity = 0
_G.Weld = {}
_G.JointsService = {}
JointsService.ClearJoinAfterMoveJoints = function()
JointsService.CreateJoinAfterMoveJoints = function()
JointsService.SetJoinAfterMoveInstance = function(joinInstance :Instance)
JointsService.SetJoinAfterMoveTarget = function(joinTarget :Instance)
JointsService.ShowPermissibleJoints = function()
_G.KeyboardService = {}
_G.Keyframe = {}
Keyframe.Time = 0
Keyframe.AddMarker = function(marker :Instance)
Keyframe.AddPose = function(pose :Instance)
Keyframe.GetMarkers = function()
Keyframe.GetPoses = function()
Keyframe.RemoveMarker = function(marker :Instance)
Keyframe.RemovePose = function(pose :Instance)
_G.KeyframeMarker = {}
_G.KeyframeSequenceProvider = {}
KeyframeSequenceProvider.GetKeyframeSequence = function(assetId :Content)
KeyframeSequenceProvider.GetKeyframeSequenceById = function(assetId :int64,useCache :bool,)
KeyframeSequenceProvider.GetMemStats = function()
KeyframeSequenceProvider.RegisterActiveKeyframeSequence = function(keyframeSequence :Instance)
KeyframeSequenceProvider.RegisterKeyframeSequence = function(keyframeSequence :Instance)
KeyframeSequenceProvider.GetAnimations = function(userId :int64)
KeyframeSequenceProvider.GetKeyframeSequenceAsync = function(assetId :Content)
_G.LSPFileSyncService = {}
_G.LanguageService = {}
_G.Light = {}
Light.Brightness = 0
_G.PointLight = {}
PointLight.Range = 0
_G.SpotLight = {}
SpotLight.Angle = 0
SpotLight.Range = 0
_G.SurfaceLight = {}
SurfaceLight.Angle = 0
SurfaceLight.Range = 0
_G.Lighting = {}
Lighting.Brightness = 0
Lighting.ClockTime = 0
Lighting.EnvironmentDiffuseScale = 0
Lighting.EnvironmentSpecularScale = 0
Lighting.ExposureCompensation = 0
Lighting.FogEnd = 0
Lighting.FogStart = 0
Lighting.GeographicLatitude = 0
Lighting.ShadowSoftness = 0
Lighting.GetMinutesAfterMidnight = function()
Lighting.GetMoonDirection = function()
Lighting.GetMoonPhase = function()
Lighting.GetSunDirection = function()
Lighting.SetMinutesAfterMidnight = function(minutes :double)
Lighting.getMinutesAfterMidnight = function()
Lighting.setMinutesAfterMidnight = function(minutes :double)
_G.LiveScriptingService = {}
_G.LocalStorageService = {}
LocalStorageService.Flush = function()
LocalStorageService.GetItem = function(key :string)
LocalStorageService.SetItem = function(key :string,value :string,)
LocalStorageService.WhenLoaded = function(callback :Function)
_G.AppStorageService = {}
_G.UserStorageService = {}
_G.LocalizationService = {}
LocalizationService.GetCorescriptLocalizations = function()
LocalizationService.GetTableEntries = function(instance :Instance)
LocalizationService.GetTranslatorForPlayer = function(player :Instance)
LocalizationService.SetRobloxLocaleId = function(locale :string)
LocalizationService.StartTextScraper = function()
LocalizationService.StopTextScraper = function()
LocalizationService.GetCountryRegionForPlayerAsync = function(player :Instance)
LocalizationService.GetTranslatorForLocaleAsync = function(locale :string)
LocalizationService.GetTranslatorForPlayerAsync = function(player :Instance)
LocalizationService.PromptDownloadGameTableToCSV = function(table :Instance)
LocalizationService.PromptExportToCSVs = function()
LocalizationService.PromptImportFromCSVs = function()
LocalizationService.PromptUploadCSVToGameTable = function()
_G.LocalizationTable = {}
LocalizationTable.GetContents = function()
LocalizationTable.GetEntries = function()
LocalizationTable.GetString = function(targetLocaleId :string,key :string,)
LocalizationTable.GetTranslator = function(localeId :string)
LocalizationTable.RemoveEntry = function(key :string,source :string,context :string,)
LocalizationTable.RemoveEntryValue = function(key :string,source :string,context :string,localeId :string,)
LocalizationTable.RemoveKey = function(key :string)
LocalizationTable.RemoveTargetLocale = function(localeId :string)
LocalizationTable.SetContents = function(contents :string)
LocalizationTable.SetEntries = function(entries :Variant)
LocalizationTable.SetEntry = function(key :string,targetLocaleId :string,text :string,)
LocalizationTable.SetEntryContext = function(key :string,source :string,context :string,newContext :string,)
LocalizationTable.SetEntryExample = function(key :string,source :string,context :string,example :string,)
LocalizationTable.SetEntryKey = function(key :string,source :string,context :string,newKey :string,)
LocalizationTable.SetEntrySource = function(key :string,source :string,context :string,newSource :string,)
LocalizationTable.SetEntryValue = function(key :string,source :string,context :string,localeId :string,text :string,)
LocalizationTable.SetIsExemptFromUGCAnalytics = function(value :bool)
_G.CloudLocalizationTable = {}
_G.LodDataEntity = {}
_G.LodDataService = {}
_G.LogReporterService = {}
LogReporterService.ReportLog = function(fingerprint :string,uuid :string,desc :string,attributes :Dictionary,annotations :Dictionary,)
_G.LogService = {}
LogService.ClearOutput = function()
LogService.ExecuteScript = function(source :string)
LogService.GetHttpResultHistory = function()
LogService.GetLogHistory = function()
LogService.RequestHttpResultApproved = function()
LogService.RequestServerHttpResult = function()
LogService.RequestServerOutput = function()
_G.LoginService = {}
LoginService.Logout = function()
LoginService.PromptLogin = function()
_G.LuaSettings = {}
_G.LuaSourceContainer = {}
_G.BaseScript = {}
_G.CoreScript = {}
_G.Script = {}
Script.GetHash = function()
_G.LocalScript = {}
_G.ModuleScript = {}
_G.LuaWebService = {}
_G.LuauScriptAnalyzerService = {}
_G.MarkerCurve = {}
MarkerCurve.GetMarkerAtIndex = function(index :int)
MarkerCurve.GetMarkers = function()
MarkerCurve.InsertMarkerAtTime = function(time :float,marker :string,)
MarkerCurve.RemoveMarkerAtIndex = function(startingIndex :int,count :int,)
_G.MarketplaceService = {}
MarketplaceService.PlayerCanMakePurchases = function(player :Instance)
MarketplaceService.PrepareCollectiblesPurchase = function(player :Instance,assetId :int64,collectibleItemId :string,collectibleItemInstanceId :string,collectibleProductId :string,expectedPrice :int,)
MarketplaceService.PromptBundlePurchase = function(player :Instance,bundleId :int64,)
MarketplaceService.PromptCollectiblesPurchase = function(player :Instance,assetId :int64,collectibleItemId :string,collectibleItemInstanceId :string,collectibleProductId :string,expectedPrice :int,)
MarketplaceService.PromptGamePassPurchase = function(player :Instance,gamePassId :int64,)
MarketplaceService.PromptNativePurchase = function(player :Instance,productId :string,)
MarketplaceService.PromptNativePurchaseWithLocalPlayer = function(productId :string)
MarketplaceService.PromptPremiumPurchase = function(player :Instance)
MarketplaceService.PromptProductPurchase = function(player :Instance,productId :int64,equipIfPurchased :bool,currencyType :CurrencyType,)
MarketplaceService.PromptPurchase = function(player :Instance,assetId :int64,equipIfPurchased :bool,currencyType :CurrencyType,)
MarketplaceService.PromptRobloxPurchase = function(assetId :int64,equipIfPurchased :bool,)
MarketplaceService.PromptSubscriptionPurchase = function(user :Player,subscriptionId :string,)
MarketplaceService.PromptThirdPartyPurchase = function(player :Instance,productId :string,)
MarketplaceService.ReportAssetSale = function(assetId :string,robuxAmount :int,)
MarketplaceService.ReportRobuxUpsellStarted = function()
MarketplaceService.SignalAssetTypePurchased = function(player :Instance,assetType :AssetType,)
MarketplaceService.SignalClientPurchaseSuccess = function(ticket :string,playerId :int64,productId :int64,)
MarketplaceService.SignalMockPurchasePremium = function()
MarketplaceService.SignalPromptBundlePurchaseFinished = function(player :Instance,bundleId :int64,success :bool,)
MarketplaceService.SignalPromptGamePassPurchaseFinished = function(player :Instance,gamePassId :int64,success :bool,)
MarketplaceService.SignalPromptPremiumPurchaseFinished = function(didTryPurchasing :bool)
MarketplaceService.SignalPromptProductPurchaseFinished = function(userId :int64,productId :int64,success :bool,)
MarketplaceService.SignalPromptPurchaseFinished = function(player :Instance,assetId :int64,success :bool,)
MarketplaceService.SignalPromptSubscriptionPurchaseFinished = function(subscriptionId :string,didTryPurchasing :bool,)
MarketplaceService.SignalServerLuaDialogClosed = function(value :bool)
MarketplaceService.GetDeveloperProductsAsync = function()
MarketplaceService.GetProductInfo = function(assetId :int64,infoType :InfoType,)
MarketplaceService.GetRobuxBalance = function()
MarketplaceService.GetSubscriptionProductInfoAsync = function(subscriptionId :string)
MarketplaceService.GetSubscriptionPurchaseInfoAsync = function(subscriptionId :string)
MarketplaceService.GetUserSubscriptionDetailsAsync = function(user :Player,subscriptionId :string,)
MarketplaceService.GetUserSubscriptionPaymentHistoryAsync = function(user :Player,subscriptionId :string,)
MarketplaceService.GetUserSubscriptionStatusAsync = function(user :Player,subscriptionId :string,)
MarketplaceService.PerformPurchase = function(infoType :InfoType,productId :int64,expectedPrice :int,requestId :string,isRobloxPurchase :bool,collectibleItemId :string,collectibleProductId :string,idempotencyKey :string,purchaseAuthToken :string,)
MarketplaceService.PerformPurchaseV2 = function(infoType :InfoType,productId :int64,expectedPrice :int,requestId :string,isRobloxPurchase :bool,collectiblesProductDetails :Dictionary,)
MarketplaceService.PerformSubscriptionPurchase = function(subscriptionId :string)
MarketplaceService.PerformSubscriptionPurchaseV2 = function(subscriptionId :string,paymentProvider :string,)
MarketplaceService.PlayerOwnsAsset = function(player :Instance,assetId :int64,)
MarketplaceService.PlayerOwnsBundle = function(player :Player,bundleId :int64,)
MarketplaceService.UserOwnsGamePassAsync = function(userId :int64,gamePassId :int64,)
_G.MaterialGenerationService = {}
MaterialGenerationService.StartSession = function()
MaterialGenerationService.GenerateMaterialVariantsAsync = function(prompt :string,samples :int64,)
MaterialGenerationService.UploadMaterialVariantsAsync = function(materialVaraints :Objects)
_G.MaterialGenerationSession = {}
MaterialGenerationSession.GenerateImagesAsync = function(prompt :string,options :Dictionary,)
MaterialGenerationSession.GenerateMaterialMapsAsync = function(imageId :string)
MaterialGenerationSession.UploadMaterialAsync = function(imageId :string)
_G.MaterialService = {}
MaterialService.GetBaseMaterialOverride = function(material :Material)
MaterialService.GetMaterialOverrideChanged = function(material :Material)
MaterialService.GetMaterialVariant = function(material :Material,name :string,)
MaterialService.GetOverrideStatus = function(material :Material)
MaterialService.SetBaseMaterialOverride = function(material :Material,name :string,)
MaterialService.SetCurrentMaterial = function(baseMaterial :Material,materialVariant :string,)
_G.MaterialVariant = {}
MaterialVariant.StudsPerTile = 0
_G.MemStorageConnection = {}
MemStorageConnection.Disconnect = function()
_G.MemStorageService = {}
MemStorageService.Bind = function(key :string,callback :Function,)
MemStorageService.BindAndFire = function(key :string,callback :Function,)
MemStorageService.Call = function(key :string,input :Variant,)
MemStorageService.Fire = function(key :string,value :string,)
MemStorageService.GetItem = function(key :string,defaultValue :string,)
MemStorageService.HasItem = function(key :string)
MemStorageService.RemoveItem = function(key :string)
MemStorageService.SetItem = function(key :string,value :string,)
_G.MemoryStoreHashMap = {}
MemoryStoreHashMap.GetAsync = function(key :string)
MemoryStoreHashMap.ListItemsAsync = function(count :int)
MemoryStoreHashMap.RemoveAsync = function(key :string)
MemoryStoreHashMap.SetAsync = function(key :string,value :Variant,expiration :int64,)
MemoryStoreHashMap.UpdateAsync = function(key :string,transformFunction :Function,expiration :int64,)
_G.MemoryStoreQueue = {}
MemoryStoreQueue.AddAsync = function(value :Variant,expiration :int64,priority :double,)
MemoryStoreQueue.ReadAsync = function(count :int,allOrNothing :bool,waitTimeout :double,)
MemoryStoreQueue.RemoveAsync = function(id :string)
_G.MemoryStoreService = {}
MemoryStoreService.GetHashMap = function(name :string)
MemoryStoreService.GetQueue = function(name :string,invisibilityTimeout :int,)
MemoryStoreService.GetSortedMap = function(name :string)
_G.MemoryStoreSortedMap = {}
MemoryStoreSortedMap.GetAsync = function(key :string)
MemoryStoreSortedMap.GetRangeAsync = function(direction :SortDirection,count :int,exclusiveLowerBound :Variant,exclusiveUpperBound :Variant,)
MemoryStoreSortedMap.RemoveAsync = function(key :string)
MemoryStoreSortedMap.SetAsync = function(key :string,value :Variant,expiration :int64,sortKey :Variant,)
MemoryStoreSortedMap.UpdateAsync = function(key :string,transformFunction :Function,expiration :int64,)
_G.Message = {}
_G.Hint = {}
_G.MessageBusConnection = {}
MessageBusConnection.Disconnect = function()
_G.MessageBusService = {}
MessageBusService.Call = function(key :string,input :Variant,)
MessageBusService.GetLast = function(mid :string)
MessageBusService.GetMessageId = function(domainName :string,messageName :string,)
MessageBusService.GetProtocolMethodRequestMessageId = function(protocolName :string,methodName :string,)
MessageBusService.GetProtocolMethodResponseMessageId = function(protocolName :string,methodName :string,)
MessageBusService.MakeRequest = function(protocolName :string,methodName :string,message :Variant,callback :Function,customTelemetryData :Variant,)
MessageBusService.Publish = function(mid :string,params :Variant,)
MessageBusService.PublishProtocolMethodRequest = function(protocolName :string,methodName :string,message :Variant,customTelemetryData :Variant,)
MessageBusService.PublishProtocolMethodResponse = function(protocolName :string,methodName :string,message :Variant,responseCode :int,customTelemetryData :Variant,)
MessageBusService.SetRequestHandler = function(protocolName :string,methodName :string,callback :Function,)
MessageBusService.Subscribe = function(mid :string,callback :Function,once :bool,sticky :bool,)
MessageBusService.SubscribeToProtocolMethodRequest = function(protocolName :string,methodName :string,callback :Function,once :bool,sticky :bool,)
MessageBusService.SubscribeToProtocolMethodResponse = function(protocolName :string,methodName :string,callback :Function,once :bool,sticky :bool,)
_G.MessagingService = {}
MessagingService.PublishAsync = function(topic :string,message :Variant,)
MessagingService.SubscribeAsync = function(topic :string,callback :Function,)
_G.MetaBreakpoint = {}
MetaBreakpoint.GetContextBreakpoints = function()
MetaBreakpoint.Remove = function(status :Function)
MetaBreakpoint.SetChildBreakpointEnabledByScriptAndContext = function(script :string,contextGST :int,enabled :bool,)
MetaBreakpoint.SetContextEnabled = function(context :int,enabled :bool,)
MetaBreakpoint.SetContinueExecution = function(enabled :bool)
MetaBreakpoint.SetEnabled = function(enabled :bool)
MetaBreakpoint.SetLine = function(line :int,status :Function,)
MetaBreakpoint.SetRemoveOnHit = function(enabled :bool)
_G.MetaBreakpointContext = {}
_G.MetaBreakpointManager = {}
MetaBreakpointManager.AddBreakpoint = function(script :Instance,line :int,condition :Instance,)
MetaBreakpointManager.GetBreakpointById = function(metaBreakpointId :int)
MetaBreakpointManager.RemoveBreakpointById = function(metaBreakpointId :int)
_G.Mouse = {}
_G.PlayerMouse = {}
_G.PluginMouse = {}
_G.MouseService = {}
_G.MultipleDocumentInterfaceInstance = {}
_G.NetworkMarker = {}
_G.NetworkPeer = {}
NetworkPeer.SetOutgoingKBPSLimit = function(limit :int)
_G.NetworkClient = {}
_G.NetworkServer = {}
NetworkServer.EncryptStringForPlayerId = function(toEncrypt :string,playerId :int64,)
_G.NetworkReplicator = {}
NetworkReplicator.GetPlayer = function()
_G.ClientReplicator = {}
ClientReplicator.RequestRCCProfilerData = function(frameRate :int,timeFrame :int,)
ClientReplicator.RequestServerLuauHeapData = function()
ClientReplicator.RequestServerScriptProfiling = function(start :bool,frequency :int?,)
ClientReplicator.RequestServerScriptProfilingData = function()
ClientReplicator.RequestServerStats = function(request :bool)
_G.ServerReplicator = {}
_G.NetworkSettings = {}
NetworkSettings.FreeMemoryMBytes = 0
_G.NoCollisionConstraint = {}
_G.Noise = {}
Noise.SampleDirectional = function(position :Vector3,direction :Vector3,)
Noise.SampleUniform = function(position :Vector3)
_G.NotificationService = {}
NotificationService.ActionEnabled = function(actionType :AppShellActionType)
NotificationService.ActionTaken = function(actionType :AppShellActionType)
NotificationService.CancelAllNotification = function(userId :int64)
NotificationService.CancelNotification = function(userId :int64,alertId :int,)
NotificationService.ScheduleNotification = function(userId :int64,alertId :int,alertMsg :string,minutesToFire :int,)
NotificationService.SwitchedToAppShellFeature = function(appShellFeature :AppShellFeature)
NotificationService.GetScheduledNotifications = function(userId :int64)
_G.OmniRecommendationsService = {}
OmniRecommendationsService.ClearSessionId = function()
OmniRecommendationsService.GetSessionId = function()
OmniRecommendationsService.MakeRequest = function(nextPageToken :string)
_G.OpenCloudApiV1 = {}
OpenCloudApiV1.CreateModel = function(name :string)
OpenCloudApiV1.CreateUserNotificationAsync = function(user :string,userNotification :OpenCloudModel,)
_G.OpenCloudService = {}
OpenCloudService.GetApiV1 = function()
OpenCloudService.RegisterOpenCloud = function(version :string,methodName :string,method :Function,)
OpenCloudService.RegistrationComplete = function()
OpenCloudService.HttpRequestAsync = function(options :Dictionary)
OpenCloudService.InvokeAsync = function(version :string,methodName :string,arguments :Dictionary,)
_G.OperationGraph = {}
_G.PVInstance = {}
PVInstance.GetPivot = function()
PVInstance.PivotTo = function(targetCFrame :CFrame)
_G.BasePart = {}
BasePart.AssemblyMass = 0
BasePart.BackParamA = 0
BasePart.BackParamB = 0
BasePart.BottomParamA = 0
BasePart.BottomParamB = 0
BasePart.Elasticity = 0
BasePart.Friction = 0
BasePart.FrontParamA = 0
BasePart.FrontParamB = 0
BasePart.LeftParamA = 0
BasePart.LeftParamB = 0
BasePart.LocalTransparencyModifier = 0
BasePart.Mass = 0
BasePart.ReceiveAge = 0
BasePart.Reflectance = 0
BasePart.RightParamA = 0
BasePart.RightParamB = 0
BasePart.SpecificGravity = 0
BasePart.TopParamA = 0
BasePart.TopParamB = 0
BasePart.Transparency = 0
BasePart.AngularAccelerationToTorque = function(angAcceleration :Vector3,angVelocity :Vector3,)
BasePart.ApplyAngularImpulse = function(impulse :Vector3)
BasePart.ApplyImpulse = function(impulse :Vector3)
BasePart.ApplyImpulseAtPosition = function(impulse :Vector3,position :Vector3,)
BasePart.BreakJoints = function()
BasePart.CanCollideWith = function(part :BasePart)
BasePart.CanSetNetworkOwnership = function()
BasePart.GetClosestPointOnSurface = function(position :Vector3)
BasePart.GetConnectedParts = function(recursive :bool)
BasePart.GetJoints = function()
BasePart.GetMass = function()
BasePart.GetNetworkOwner = function()
BasePart.GetNetworkOwnershipAuto = function()
BasePart.GetNoCollisionConstraints = function()
BasePart.GetRenderCFrame = function()
BasePart.GetRootPart = function()
BasePart.GetTouchingParts = function()
BasePart.GetVelocityAtPosition = function(position :Vector3)
BasePart.IsGrounded = function()
BasePart.MakeJoints = function()
BasePart.Resize = function(normalId :NormalId,deltaAmount :int,)
BasePart.SetNetworkOwner = function(playerInstance :Player)
BasePart.SetNetworkOwnershipAuto = function()
BasePart.TorqueToAngularAcceleration = function(torque :Vector3,angVelocity :Vector3,)
BasePart.breakJoints = function()
BasePart.getMass = function()
BasePart.makeJoints = function()
BasePart.resize = function(normalId :NormalId,deltaAmount :int,)
BasePart.IntersectAsync = function(parts :Objects,collisionfidelity :CollisionFidelity,renderFidelity :RenderFidelity,)
BasePart.SubtractAsync = function(parts :Objects,collisionfidelity :CollisionFidelity,renderFidelity :RenderFidelity,)
BasePart.UnionAsync = function(parts :Objects,collisionfidelity :CollisionFidelity,renderFidelity :RenderFidelity,)
_G.CornerWedgePart = {}
_G.FormFactorPart = {}
_G.Part = {}
_G.FlagStand = {}
_G.Platform = {}
_G.Seat = {}
Seat.Sit = function(humanoid :Instance)
_G.SkateboardPlatform = {}
SkateboardPlatform.ApplySpecificImpulse = function(impulseWorld :Vector3)
_G.SpawnLocation = {}
_G.WedgePart = {}
_G.Terrain = {}
Terrain.GrassLength = 0
Terrain.WaterReflectance = 0
Terrain.WaterTransparency = 0
Terrain.WaterWaveSize = 0
Terrain.WaterWaveSpeed = 0
Terrain.AutowedgeCell = function(x :int,y :int,z :int,)
Terrain.AutowedgeCells = function(region :Region3int16)
Terrain.CanShorelinesBeUpgraded = function()
Terrain.CanSmoothVoxelsBeUpgraded = function()
Terrain.CellCenterToWorld = function(x :int,y :int,z :int,)
Terrain.CellCornerToWorld = function(x :int,y :int,z :int,)
Terrain.Clear = function()
Terrain.ConvertToSmooth = function()
Terrain.CopyRegion = function(region :Region3int16)
Terrain.CountCells = function()
Terrain.FillBall = function(center :Vector3,radius :float,material :Material,)
Terrain.FillBlock = function(cframe :CFrame,size :Vector3,material :Material,)
Terrain.FillCylinder = function(cframe :CFrame,height :float,radius :float,material :Material,)
Terrain.FillRegion = function(region :Region3,resolution :float,material :Material,)
Terrain.FillWedge = function(cframe :CFrame,size :Vector3,material :Material,)
Terrain.GetCell = function(x :int,y :int,z :int,)
Terrain.GetMaterialColor = function(material :Material)
Terrain.GetTerrainWireframe = function(cframe :CFrame,size :Vector3,)
Terrain.GetWaterCell = function(x :int,y :int,z :int,)
Terrain.PasteRegion = function(region :TerrainRegion,corner :Vector3int16,pasteEmptyCells :bool,)
Terrain.ReadVoxelChannels = function(region :Region3,resolution :float,channelIds :Array,)
Terrain.ReadVoxels = function(region :Region3,resolution :float,)
Terrain.ReplaceMaterial = function(region :Region3,resolution :float,sourceMaterial :Material,targetMaterial :Material,)
Terrain.ReplaceMaterialInTransform = function(cframe :CFrame,size :Vector3,sourceMaterial :Material,targetMaterial :Material,)
Terrain.ReplaceMaterialInTransformSubregion = function(cframe :CFrame,size :Vector3,sourceMaterial :Material,targetMaterial :Material,targetRegion :Region3int16,)
Terrain.SetCell = function(x :int,y :int,z :int,material :CellMaterial,block :CellBlock,orientation :CellOrientation,)
Terrain.SetCells = function(region :Region3int16,material :CellMaterial,block :CellBlock,orientation :CellOrientation,)
Terrain.SetMaterialColor = function(material :Material,value :Color3,)
Terrain.SetMaterialInTransform = function(cframe :CFrame,size :Vector3,targetMaterial :Material,)
Terrain.SetMaterialInTransformSubregion = function(cframe :CFrame,size :Vector3,targetMaterial :Material,targetRegion :Region3int16,)
Terrain.SetWaterCell = function(x :int,y :int,z :int,force :WaterForce,direction :WaterDirection,)
Terrain.SmoothRegion = function(region :Region3,resolution :float,strength :float,)
Terrain.WorldToCell = function(position :Vector3)
Terrain.WorldToCellPreferEmpty = function(position :Vector3)
Terrain.WorldToCellPreferSolid = function(position :Vector3)
Terrain.WriteVoxelChannels = function(region :Region3,resolution :float,channels :Dictionary,)
Terrain.WriteVoxels = function(region :Region3,resolution :float,materials :Array,occupancy :Array,)
_G.TriangleMeshPart = {}
_G.MeshPart = {}
MeshPart.ApplyMesh = function(meshPart :Instance)
_G.PartOperation = {}
PartOperation.SmoothingAngle = 0
PartOperation.SubstituteGeometry = function(source :Instance)
_G.IntersectOperation = {}
_G.NegateOperation = {}
_G.UnionOperation = {}
_G.TrussPart = {}
_G.VehicleSeat = {}
VehicleSeat.MaxSpeed = 0
VehicleSeat.SteerFloat = 0
VehicleSeat.ThrottleFloat = 0
VehicleSeat.Torque = 0
VehicleSeat.TurnSpeed = 0
VehicleSeat.Sit = function(humanoid :Instance)
_G.Model = {}
Model.Scale = 0
Model.AddPersistentPlayer = function(playerInstance :Player)
Model.BreakJoints = function()
Model.GetBoundingBox = function()
Model.GetExtentsSize = function()
Model.GetModelCFrame = function()
Model.GetModelSize = function()
Model.GetPersistentPlayers = function()
Model.GetPrimaryPartCFrame = function()
Model.GetScale = function()
Model.MakeJoints = function()
Model.MoveTo = function(position :Vector3)
Model.RemovePersistentPlayer = function(playerInstance :Player)
Model.ResetOrientationToIdentity = function()
Model.ScaleTo = function(newScaleFactor :float)
Model.SetIdentityOrientation = function()
Model.SetPrimaryPartCFrame = function(cframe :CFrame)
Model.TranslateBy = function(delta :Vector3)
Model.breakJoints = function()
Model.makeJoints = function()
Model.move = function(location :Vector3)
Model.moveTo = function(location :Vector3)
_G.Actor = {}
Actor.BindToMessage = function(topic :string,function :Function,)
Actor.BindToMessageParallel = function(topic :string,function :Function,)
Actor.SendMessage = function(topic :string,message :Tuple,)
_G.BackpackItem = {}
_G.HopperBin = {}
HopperBin.Disable = function()
HopperBin.ToggleSelect = function()
_G.Tool = {}
Tool.Activate = function()
Tool.Deactivate = function()
_G.Flag = {}
_G.Status = {}
_G.WorldRoot = {}
WorldRoot.ArePartsTouchingOthers = function(partList :Objects,overlapIgnored :float,)
WorldRoot.Blockcast = function(cframe :CFrame,size :Vector3,direction :Vector3,params :RaycastParams,)
WorldRoot.BulkMoveTo = function(partList :Objects,cframeList :Array,eventMode :BulkMoveMode,)
WorldRoot.CacheCurrentTerrain = function(id :string,center :Vector3,radius :float,)
WorldRoot.ClearCachedTerrain = function(id :string)
WorldRoot.FindPartOnRay = function(ray :Ray,ignoreDescendantsInstance :Instance,terrainCellsAreCubes :bool,ignoreWater :bool,)
WorldRoot.FindPartOnRayWithIgnoreList = function(ray :Ray,ignoreDescendantsTable :Objects,terrainCellsAreCubes :bool,ignoreWater :bool,)
WorldRoot.FindPartOnRayWithWhitelist = function(ray :Ray,whitelistDescendantsTable :Objects,ignoreWater :bool,)
WorldRoot.FindPartsInRegion3 = function(region :Region3,ignoreDescendantsInstance :Instance,maxParts :int,)
WorldRoot.FindPartsInRegion3WithIgnoreList = function(region :Region3,ignoreDescendantsTable :Objects,maxParts :int,)
WorldRoot.FindPartsInRegion3WithWhiteList = function(region :Region3,whitelistDescendantsTable :Objects,maxParts :int,)
WorldRoot.GetPartBoundsInBox = function(cframe :CFrame,size :Vector3,overlapParams :OverlapParams,)
WorldRoot.GetPartBoundsInRadius = function(position :Vector3,radius :float,overlapParams :OverlapParams,)
WorldRoot.GetPartsInPart = function(part :BasePart,overlapParams :OverlapParams,)
WorldRoot.IKMoveTo = function(part :BasePart,target :CFrame,translateStiffness :float,rotateStiffness :float,collisionsMode :IKCollisionsMode,)
WorldRoot.IsRegion3Empty = function(region :Region3,ignoreDescendentsInstance :Instance,)
WorldRoot.IsRegion3EmptyWithIgnoreList = function(region :Region3,ignoreDescendentsTable :Objects,)
WorldRoot.Raycast = function(origin :Vector3,direction :Vector3,raycastParams :RaycastParams,)
WorldRoot.RaycastCachedTerrain = function(id :string,origin :Vector3,direction :Vector3,ignoreWater :bool,)
WorldRoot.SetInsertPoint = function(point :Vector3,ignoreGrid :bool,)
WorldRoot.Shapecast = function(part :BasePart,direction :Vector3,params :RaycastParams,)
WorldRoot.Spherecast = function(position :Vector3,radius :float,direction :Vector3,params :RaycastParams,)
WorldRoot.StepPhysics = function(dt :float,parts :Objects,)
WorldRoot.findPartOnRay = function(ray :Ray,ignoreDescendantsInstance :Instance,terrainCellsAreCubes :bool,ignoreWater :bool,)
WorldRoot.findPartsInRegion3 = function(region :Region3,ignoreDescendantsInstance :Instance,maxParts :int,)
_G.Workspace = {}
Workspace.AirDensity = 0
Workspace.FallenPartsDestroyHeight = 0
Workspace.Gravity = 0
Workspace.BreakJoints = function(objects :Objects)
Workspace.CalculateJumpDistance = function(gravity :float,jumpPower :float,walkSpeed :float,)
Workspace.CalculateJumpHeight = function(gravity :float,jumpPower :float,)
Workspace.CalculateJumpPower = function(gravity :float,jumpHeight :float,)
Workspace.ExperimentalSolverIsEnabled = function()
Workspace.GetNumAwakeParts = function()
Workspace.GetPhysicsThrottling = function()
Workspace.GetRealPhysicsFPS = function()
Workspace.GetServerTimeNow = function()
Workspace.JoinToOutsiders = function(objects :Objects,jointType :JointCreationMode,)
Workspace.MakeJoints = function(objects :Objects)
Workspace.PGSIsEnabled = function()
Workspace.SetAvatarUnificationMode = function(value :AvatarUnificationMode)
Workspace.SetMeshPartHeadsAndAccessories = function(value :MeshPartHeadsAndAccessories)
Workspace.SetPhysicsThrottleEnabled = function(value :bool)
Workspace.UnjoinFromOutsiders = function(objects :Objects)
Workspace.ZoomToExtents = function()
_G.WorldModel = {}
_G.PackageLink = {}
_G.PackageService = {}
_G.PackageUIService = {}
PackageUIService.ConvertToPackageUpload = function(uploadUrl :string,cloneInstances :Objects,originalInstances :Objects,)
PackageUIService.GetPackageInfo = function(packageAssetId :int64)
PackageUIService.PublishPackage = function(packageInstance :Instance,addUndoWayPoint :bool,)
PackageUIService.SetPackageVersion = function(packageInstance :Instance,versionNumber :int64,)
_G.Pages = {}
Pages.GetCurrentPage = function()
Pages.AdvanceToNextPageAsync = function()
_G.AudioPages = {}
_G.CatalogPages = {}
_G.DataStoreKeyPages = {}
_G.DataStoreListingPages = {}
_G.DataStorePages = {}
_G.DataStoreVersionPages = {}
_G.FriendPages = {}
_G.InventoryPages = {}
_G.EmotesPages = {}
_G.MemoryStoreHashMapPages = {}
_G.OutfitPages = {}
_G.StandardPages = {}
_G.PartOperationAsset = {}
_G.ParticleEmitter = {}
ParticleEmitter.Brightness = 0
ParticleEmitter.Drag = 0
ParticleEmitter.LightEmission = 0
ParticleEmitter.LightInfluence = 0
ParticleEmitter.Rate = 0
ParticleEmitter.ShapePartial = 0
ParticleEmitter.TimeScale = 0
ParticleEmitter.VelocityInheritance = 0
ParticleEmitter.VelocitySpread = 0
ParticleEmitter.ZOffset = 0
ParticleEmitter.Clear = function()
ParticleEmitter.Emit = function(particleCount :int)
ParticleEmitter.FastForward = function(numFrames :int)
_G.PatchBundlerFileWatch = {}
_G.PatchMapping = {}
_G.Path = {}
Path.GetPointCoordinates = function()
Path.GetWaypoints = function()
Path.CheckOcclusionAsync = function(start :int)
Path.ComputeAsync = function(start :Vector3,finish :Vector3,)
_G.PathfindingLink = {}
_G.PathfindingModifier = {}
_G.PathfindingService = {}
PathfindingService.EmptyCutoff = 0
PathfindingService.CreatePath = function(agentParameters :Dictionary)
PathfindingService.ComputeRawPathAsync = function(start :Vector3,finish :Vector3,maxDistance :float,)
PathfindingService.ComputeSmoothPathAsync = function(start :Vector3,finish :Vector3,maxDistance :float,)
PathfindingService.FindPathAsync = function(start :Vector3,finish :Vector3,)
_G.PausedState = {}
_G.PausedStateBreakpoint = {}
_G.PausedStateException = {}
_G.PermissionsService = {}
PermissionsService.GetIsThirdPartyAssetAllowed = function()
PermissionsService.GetIsThirdPartyPurchaseAllowed = function()
PermissionsService.GetIsThirdPartyTeleportAllowed = function()
PermissionsService.GetPermissions = function(assetId :string)
PermissionsService.SetPermissions = function(assetId :string,permissions :Array,)
_G.PhysicsService = {}
PhysicsService.CollisionGroupContainsPart = function(name :string,part :BasePart,)
PhysicsService.CollisionGroupSetCollidable = function(name1 :string,name2 :string,collidable :bool,)
PhysicsService.CollisionGroupsAreCollidable = function(name1 :string,name2 :string,)
PhysicsService.CreateCollisionGroup = function(name :string)
PhysicsService.GetCollisionGroupId = function(name :string)
PhysicsService.GetCollisionGroupName = function(name :int)
PhysicsService.GetCollisionGroups = function()
PhysicsService.GetMaxCollisionGroups = function()
PhysicsService.GetRegisteredCollisionGroups = function()
PhysicsService.IkSolve = function(part :BasePart,target :CFrame,translateStiffness :float,rotateStiffness :float,)
PhysicsService.IsCollisionGroupRegistered = function(name :string)
PhysicsService.LocalIkSolve = function(part :BasePart,target :CFrame,translateStiffness :float,rotateStiffness :float,)
PhysicsService.RegisterCollisionGroup = function(name :string)
PhysicsService.RemoveCollisionGroup = function(name :string)
PhysicsService.RenameCollisionGroup = function(from :string,to :string,)
PhysicsService.SetPartCollisionGroup = function(part :BasePart,name :string,)
PhysicsService.UnregisterCollisionGroup = function(name :string)
_G.PhysicsSettings = {}
PhysicsSettings.FluidForceDrawScale = 0
PhysicsSettings.ForceDrawScale = 0
PhysicsSettings.TorqueDrawScale = 0
_G.PlaceStatsService = {}
_G.PlacesService = {}
PlacesService.StartPlaySolo = function()
PlacesService.StopPlaySolo = function()
_G.PlatformCloudStorageService = {}
PlatformCloudStorageService.IsUserDataAvailable = function()
PlatformCloudStorageService.GetUserDataAsync = function(key :string)
PlatformCloudStorageService.SetUserDataAsync = function(key :string,data :Dictionary,)
_G.PlatformFriendsService = {}
PlatformFriendsService.IsInviteFriendsEnabled = function()
PlatformFriendsService.IsProfileEnabled = function()
PlatformFriendsService.ShowInviteFriendsUI = function()
PlatformFriendsService.ShowProfile = function(platformUserId :string)
PlatformFriendsService.GetPartyMembers = function()
_G.Player = {}
Player.CameraMaxZoomDistance = 0
Player.CameraMinZoomDistance = 0
Player.HealthDisplayDistance = 0
Player.MaximumSimulationRadius = 0
Player.NameDisplayDistance = 0
Player.SimulationRadius = 0
Player.AddToBlockList = function(userIds :Array)
Player.ClearCharacterAppearance = function()
Player.DistanceFromCharacter = function(point :Vector3)
Player.GetFriendStatus = function(player :Player)
Player.GetGameSessionID = function()
Player.GetJoinData = function()
Player.GetMouse = function()
Player.GetNetworkPing = function()
Player.GetUnder13 = function()
Player.HasAppearanceLoaded = function()
Player.IsVerified = function()
Player.Kick = function(message :string)
Player.LoadBoolean = function(key :string)
Player.LoadCharacterAppearance = function(assetInstance :Instance)
Player.LoadData = function()
Player.LoadInstance = function(key :string)
Player.LoadNumber = function(key :string)
Player.LoadString = function(key :string)
Player.Move = function(walkDirection :Vector3,relativeToCamera :bool,)
Player.RemoveCharacter = function()
Player.RequestFriendship = function(player :Player)
Player.RevokeFriendship = function(player :Player)
Player.SaveBoolean = function(key :string,value :bool,)
Player.SaveData = function()
Player.SaveInstance = function(key :string,value :Instance,)
Player.SaveNumber = function(key :string,value :double,)
Player.SaveString = function(key :string,value :string,)
Player.SetAccountAge = function(accountAge :int)
Player.SetBlockListInitialized = function()
Player.SetCharacterAppearanceJson = function(jsonBlob :string)
Player.SetChatTranslationSettingsLocaleId = function(locale :string)
Player.SetExperienceSettingsLocaleId = function(locale :string)
Player.SetMembershipType = function(membershipType :MembershipType)
Player.SetModerationAccessKey = function(moderationAccessKey :string)
Player.SetSuperSafeChat = function(value :bool)
Player.SetUnder13 = function(value :bool)
Player.UpdatePlayerBlocked = function(userId :int64,blocked :bool,)
Player.loadBoolean = function(key :string)
Player.loadInstance = function(key :string)
Player.loadNumber = function(key :string)
Player.loadString = function(key :string)
Player.saveBoolean = function(key :string,value :bool,)
Player.saveInstance = function(key :string,value :Instance,)
Player.saveNumber = function(key :string,value :double,)
Player.saveString = function(key :string,value :string,)
Player.GetFriendsOnline = function(maxFriends :int)
Player.GetRankInGroup = function(groupId :int64)
Player.GetRoleInGroup = function(groupId :int64)
Player.IsBestFriendsWith = function(userId :int64)
Player.IsFriendsWith = function(userId :int64)
Player.IsInGroup = function(groupId :int64)
Player.LoadCharacter = function()
Player.LoadCharacterBlocking = function()
Player.LoadCharacterWithHumanoidDescription = function(humanoidDescription :HumanoidDescription)
Player.RequestStreamAroundAsync = function(position :Vector3,timeOut :double,)
Player.WaitForDataReady = function()
Player.isFriendsWith = function(userId :int64)
Player.waitForDataReady = function()
_G.PlayerEmulatorService = {}
PlayerEmulatorService.GetEmulatedPolicyInfo = function()
PlayerEmulatorService.RegionCodeWillHaveAutomaticNonCustomPolicies = function(regionCode :string)
PlayerEmulatorService.SetEmulatedPolicyInfo = function(emulatedPolicyInfo :Dictionary)
_G.PlayerScripts = {}
PlayerScripts.ClearComputerCameraMovementModes = function()
PlayerScripts.ClearComputerMovementModes = function()
PlayerScripts.ClearTouchCameraMovementModes = function()
PlayerScripts.ClearTouchMovementModes = function()
PlayerScripts.GetRegisteredComputerCameraMovementModes = function()
PlayerScripts.GetRegisteredComputerMovementModes = function()
PlayerScripts.GetRegisteredTouchCameraMovementModes = function()
PlayerScripts.GetRegisteredTouchMovementModes = function()
PlayerScripts.RegisterComputerCameraMovementMode = function(cameraMovementMode :ComputerCameraMovementMode)
PlayerScripts.RegisterComputerMovementMode = function(movementMode :ComputerMovementMode)
PlayerScripts.RegisterTouchCameraMovementMode = function(cameraMovementMode :TouchCameraMovementMode)
PlayerScripts.RegisterTouchMovementMode = function(movementMode :TouchMovementMode)
_G.PlayerViewService = {}
PlayerViewService.GetDeviceCameraCFrame = function(player :Player)
PlayerViewService.GetDeviceCameraCFrameForSelfView = function()
PlayerViewService.OnCameraCFrameReplicationRequest = function()
PlayerViewService.UpdateDeviceCFrame = function(player :Player,cframe :CFrame,timestamp :int64,)
_G.Players = {}
Players.RespawnTime = 0
Players.Chat = function(message :string)
Players.CreateLocalPlayer = function()
Players.GetPlayerByUserId = function(userId :int64)
Players.GetPlayerFromCharacter = function(character :Model)
Players.GetPlayers = function()
Players.ReportAbuse = function(player :Player,reason :string,optionalMessage :string,)
Players.ReportAbuseV3 = function(player :Player,jsonTags :string,)
Players.ResetLocalPlayer = function()
Players.SetChatStyle = function(style :ChatStyle)
Players.SetLocalPlayerInfo = function(userId :int64,userName :string,displayName :string,membershipType :MembershipType,isUnder13 :bool,)
Players.TeamChat = function(message :string)
Players.WhisperChat = function(message :string,player :Instance,)
Players.getPlayers = function()
Players.playerFromCharacter = function(character :Model)
Players.players = function()
Players.CreateHumanoidModelFromDescription = function(description :HumanoidDescription,rigType :HumanoidRigType,assetTypeVerification :AssetTypeVerification,)
Players.CreateHumanoidModelFromUserId = function(userId :int64)
Players.GetCharacterAppearanceAsync = function(userId :int64)
Players.GetCharacterAppearanceInfoAsync = function(userId :int64)
Players.GetFriendsAsync = function(userId :int64)
Players.GetHumanoidDescriptionFromOutfitId = function(outfitId :int64)
Players.GetHumanoidDescriptionFromUserId = function(userId :int64)
Players.GetNameFromUserIdAsync = function(userId :int64)
Players.GetUserIdFromNameAsync = function(userName :string)
Players.GetUserThumbnailAsync = function(userId :int64,thumbnailType :ThumbnailType,thumbnailSize :ThumbnailSize,)
_G.Plugin = {}
Plugin.GridSize = 0
Plugin.Activate = function(exclusiveMouse :bool)
Plugin.CreatePluginAction = function(actionId :string,text :string,statusTip :string,iconName :string,allowBinding :bool,)
Plugin.CreatePluginMenu = function(id :string,title :string,icon :string,)
Plugin.CreateToolbar = function(name :string)
Plugin.Deactivate = function()
Plugin.GetItem = function(key :string,defaultValue :Variant,)
Plugin.GetJoinMode = function()
Plugin.GetMouse = function()
Plugin.GetPluginComponent = function(name :string)
Plugin.GetSelectedRibbonTool = function()
Plugin.GetSetting = function(key :string)
Plugin.GetStudioUserId = function()
Plugin.Intersect = function(objects :Objects)
Plugin.Invoke = function(key :string,arguments :Tuple,)
Plugin.IsActivated = function()
Plugin.IsActivatedWithExclusiveMouse = function()
Plugin.Negate = function(objects :Objects)
Plugin.OnInvoke = function(key :string,callback :Function,)
Plugin.OnSetItem = function(key :string,callback :Function,)
Plugin.OpenScript = function(script :LuaSourceContainer,lineNumber :int,)
Plugin.OpenWikiPage = function(url :string)
Plugin.PauseSound = function(sound :Instance)
Plugin.PlaySound = function(sound :Instance,normalizedTimePosition :double,)
Plugin.ResumeSound = function(sound :Instance)
Plugin.SaveSelectedToRoblox = function()
Plugin.SelectRibbonTool = function(tool :RibbonTool,position :UDim2,)
Plugin.Separate = function(objects :Objects)
Plugin.SetItem = function(key :string,value :Variant,)
Plugin.SetReady = function()
Plugin.SetSetting = function(key :string,value :Variant,)
Plugin.StartDecalDrag = function(decal :Instance)
Plugin.StartDrag = function(dragData :Dictionary)
Plugin.StopAllSounds = function()
Plugin.Union = function(objects :Objects)
Plugin.CreateDockWidgetPluginGui = function(pluginGuiId :string,dockWidgetPluginGuiInfo :DockWidgetPluginGuiInfo,)
Plugin.CreateQWidgetPluginGui = function(pluginGuiId :string,pluginGuiOptions :Dictionary,)
Plugin.ImportFbxAnimation = function(rigModel :Instance,isR15 :bool,)
Plugin.ImportFbxRig = function(isR15 :bool)
Plugin.PromptForExistingAssetId = function(assetType :string)
Plugin.PromptSaveSelection = function(suggestedFileName :string)
_G.PluginAction = {}
_G.PluginCapabilities = {}
_G.PluginDebugService = {}
_G.PluginDragEvent = {}
_G.PluginGuiService = {}
_G.PluginManagementService = {}
PluginManagementService.SetAutoUpdate = function(pluginId :int64,state :bool,)
PluginManagementService.GetOTAPluginVersion = function(pluginName :string)
_G.PluginManager = {}
PluginManager.CreatePlugin = function()
PluginManager.ExportPlace = function(filePath :string)
PluginManager.ExportSelection = function(filePath :string)
_G.PluginManagerInterface = {}
PluginManagerInterface.CreatePlugin = function()
PluginManagerInterface.ExportPlace = function(filePath :string)
PluginManagerInterface.ExportSelection = function(filePath :string)
_G.PluginMenu = {}
PluginMenu.AddAction = function(action :Instance)
PluginMenu.AddMenu = function(menu :Instance)
PluginMenu.AddNewAction = function(actionId :string,text :string,icon :string,)
PluginMenu.AddSeparator = function()
PluginMenu.Clear = function()
PluginMenu.ShowAsync = function()
_G.PluginPolicyService = {}
PluginPolicyService.GetPluginPolicy = function(pluginName :string)
_G.PluginToolbar = {}
PluginToolbar.CreateButton = function(buttonId :string,tooltip :string,iconname :string,text :string,)
PluginToolbar.CreatePopupButton = function(buttonId :string,tooltip :string,iconname :string,text :string,)
_G.PluginToolbarButton = {}
PluginToolbarButton.SetActive = function(active :bool)
_G.PointsService = {}
PointsService.GetAwardablePoints = function()
PointsService.AwardPoints = function(userId :int64,amount :int,)
PointsService.GetGamePointBalance = function(userId :int64)
PointsService.GetPointBalance = function(userId :int64)
_G.PolicyService = {}
PolicyService.GetPolicyInfoForPlayerAsync = function(player :Instance)
PolicyService.GetPolicyInfoForServerRobloxOnlyAsync = function()
_G.PoseBase = {}
PoseBase.Weight = 0
_G.NumberPose = {}
_G.Pose = {}
Pose.MaskWeight = 0
Pose.AddSubPose = function(pose :Instance)
Pose.GetSubPoses = function()
Pose.RemoveSubPose = function(pose :Instance)
_G.PostEffect = {}
_G.BloomEffect = {}
BloomEffect.Intensity = 0
BloomEffect.Size = 0
BloomEffect.Threshold = 0
_G.BlurEffect = {}
BlurEffect.Size = 0
_G.ColorCorrectionEffect = {}
ColorCorrectionEffect.Brightness = 0
ColorCorrectionEffect.Contrast = 0
ColorCorrectionEffect.Saturation = 0
_G.DepthOfFieldEffect = {}
DepthOfFieldEffect.FarIntensity = 0
DepthOfFieldEffect.FocusDistance = 0
DepthOfFieldEffect.InFocusRadius = 0
DepthOfFieldEffect.NearIntensity = 0
_G.SunRaysEffect = {}
SunRaysEffect.Intensity = 0
SunRaysEffect.Spread = 0
_G.ProcessInstancePhysicsService = {}
_G.ProjectFolderService = {}
ProjectFolderService.ExportScripts = function(path :string)
ProjectFolderService.ImportScripts = function(path :string)
ProjectFolderService.SelectFolder = function()
_G.ProximityPrompt = {}
ProximityPrompt.HoldDuration = 0
ProximityPrompt.MaxActivationDistance = 0
ProximityPrompt.InputHoldBegin = function()
ProximityPrompt.InputHoldEnd = function()
_G.ProximityPromptService = {}
_G.PublishService = {}
PublishService.PublishDescendantAssets = function(instance :Instance)
PublishService.CreateAssetAndWaitForAssetId = function(instances :Objects,operationId :string,creatorType :AssetCreatorType,creatorId :int64,assetType :string,name :string,description :string,expectedPrice :int,)
PublishService.CreateAssetOrAssetVersionAndPollAssetWithTelemetryAsync = function(serializedInstance :string,creatorType :AssetCreatorType,creatorId :int64,assetType :string,assetId :int64,name :string,description :string,token :string,contentType :string,expectedPrice :int,)
PublishService.PublishCageMeshAsync = function(wrap :Instance,cageType :CageType,)
_G.RbxAnalyticsService = {}
RbxAnalyticsService.AddGlobalPointsField = function(key :string,value :int,)
RbxAnalyticsService.AddGlobalPointsTag = function(key :string,value :string,)
RbxAnalyticsService.DEPRECATED_TrackEvent = function(category :string,action :string,label :string,value :int64,)
RbxAnalyticsService.DEPRECATED_TrackEventWithArgs = function(category :string,action :string,label :string,args :Dictionary,value :int64,)
RbxAnalyticsService.GetClientId = function()
RbxAnalyticsService.GetPlaySessionId = function()
RbxAnalyticsService.GetSessionId = function()
RbxAnalyticsService.ReleaseRBXEventStream = function(target :string)
RbxAnalyticsService.RemoveGlobalPointsField = function(key :string)
RbxAnalyticsService.RemoveGlobalPointsTag = function(key :string)
RbxAnalyticsService.ReportCounter = function(counterName :string,amount :int,)
RbxAnalyticsService.ReportInfluxSeries = function(seriesName :string,points :Dictionary,throttlingPercentage :int,)
RbxAnalyticsService.ReportStats = function(category :string,value :float,)
RbxAnalyticsService.ReportToDiagByCountryCode = function(featureName :string,measureName :string,seconds :double,)
RbxAnalyticsService.SendEventDeferred = function(target :string,eventContext :string,eventName :string,additionalArgs :Dictionary,)
RbxAnalyticsService.SendEventImmediately = function(target :string,eventContext :string,eventName :string,additionalArgs :Dictionary,)
RbxAnalyticsService.SetRBXEvent = function(target :string,eventContext :string,eventName :string,additionalArgs :Dictionary,)
RbxAnalyticsService.SetRBXEventStream = function(target :string,eventContext :string,eventName :string,additionalArgs :Dictionary,)
RbxAnalyticsService.TrackEvent = function(category :string,action :string,label :string,value :int64,)
RbxAnalyticsService.TrackEventWithArgs = function(category :string,action :string,label :string,args :Dictionary,value :int64,)
RbxAnalyticsService.UpdateHeartbeatObject = function(args :Dictionary)
_G.ReflectionMetadata = {}
_G.ReflectionMetadataCallbacks = {}
_G.ReflectionMetadataClasses = {}
_G.ReflectionMetadataEnums = {}
_G.ReflectionMetadataEvents = {}
_G.ReflectionMetadataFunctions = {}
_G.ReflectionMetadataItem = {}
_G.ReflectionMetadataClass = {}
_G.ReflectionMetadataEnum = {}
_G.ReflectionMetadataEnumItem = {}
_G.ReflectionMetadataMember = {}
_G.ReflectionMetadataProperties = {}
_G.ReflectionMetadataYieldFunctions = {}
_G.ReflectionService = {}
ReflectionService.GetPropertyNames = function(name :string)
_G.RemoteCursorService = {}
_G.RemoteDebuggerServer = {}
_G.RemoteFunction = {}
RemoteFunction.InvokeClient = function(player :Player,arguments :Tuple,)
RemoteFunction.InvokeServer = function(arguments :Tuple)
_G.RenderSettings = {}
RenderSettings.GetMaxQualityLevel = function()
_G.RenderingTest = {}
RenderingTest.ComparisonPsnrThreshold = 0
RenderingTest.FieldOfView = 0
RenderingTest.RenderdocTriggerCapture = function()
_G.ReplicatedFirst = {}
ReplicatedFirst.IsDefaultLoadingGuiRemoved = function()
ReplicatedFirst.IsFinishedReplicating = function()
ReplicatedFirst.RemoveDefaultLoadingScreen = function()
ReplicatedFirst.SetDefaultLoadingGuiRemoved = function()
_G.ReplicatedStorage = {}
_G.RibbonNotificationService = {}
RibbonNotificationService.OnNotificationUpdateFromPlugin = function(newNotificationId :string,seenNotificationId :string,)
_G.RobloxPluginGuiService = {}
_G.RobloxReplicatedStorage = {}
_G.RobloxServerStorage = {}
_G.RomarkService = {}
RomarkService.EndRemoteRomarkTest = function()
_G.RotationCurve = {}
RotationCurve.GetKeyAtIndex = function(index :int)
RotationCurve.GetKeyIndicesAtTime = function(time :float)
RotationCurve.GetKeys = function()
RotationCurve.GetValueAtTime = function(time :float)
RotationCurve.InsertKey = function(key :RotationCurveKey)
RotationCurve.RemoveKeyAtIndex = function(startingIndex :int,count :int,)
RotationCurve.SetKeys = function(keys :Array)
_G.RtMessagingService = {}
_G.RunService = {}
RunService.BindToRenderStep = function(name :string,priority :int,function :Function,)
RunService.GetCoreScriptVersion = function()
RunService.GetRobloxClientChannel = function()
RunService.GetRobloxGuiFocused = function()
RunService.GetRobloxVersion = function()
RunService.IsClient = function()
RunService.IsEdit = function()
RunService.IsRunMode = function()
RunService.IsRunning = function()
RunService.IsServer = function()
RunService.IsStudio = function()
RunService.Pause = function()
RunService.Reset = function()
RunService.Run = function()
RunService.Set3dRenderingEnabled = function(enable :bool)
RunService.SetRobloxGuiFocused = function(focus :bool)
RunService.Stop = function()
RunService.UnbindFromRenderStep = function(name :string)
RunService.setThrottleFramerateEnabled = function(enable :bool)
_G.RuntimeScriptService = {}
_G.SafetyService = {}
SafetyService.TakeScreenshot = function(screenshotOptions :Dictionary)
_G.ScreenshotHud = {}
_G.ScriptBuilder = {}
_G.SyncScriptBuilder = {}
_G.ScriptChangeService = {}
_G.ScriptCloneWatcher = {}
_G.ScriptCloneWatcherHelper = {}
_G.ScriptCommitService = {}
_G.ScriptContext = {}
ScriptContext.AddCoreScriptLocal = function(name :string,parent :Instance,)
ScriptContext.ClearScriptProfilingData = function()
ScriptContext.DeserializeScriptProfilerString = function(jsonString :string?)
ScriptContext.GetCoverageStats = function()
ScriptContext.GetLuauHeapInstanceReferenceReport = function(target :string)
ScriptContext.GetLuauHeapMemoryReport = function(target :string)
ScriptContext.GetScriptProfilingData = function()
ScriptContext.SaveScriptProfilingData = function(jsonString :string,filename :string,)
ScriptContext.SetTimeout = function(seconds :double)
ScriptContext.StartScriptProfiling = function(frequency :int?)
ScriptContext.StopScriptProfiling = function()
_G.ScriptDebugger = {}
ScriptDebugger.AddWatch = function(expression :string)
ScriptDebugger.GetBreakpoints = function()
ScriptDebugger.GetGlobals = function(stackFrame :int)
ScriptDebugger.GetLocals = function(stackFrame :int)
ScriptDebugger.GetStack = function()
ScriptDebugger.GetUpvalues = function(stackFrame :int)
ScriptDebugger.GetWatchValue = function(watch :Instance)
ScriptDebugger.GetWatches = function()
ScriptDebugger.SetBreakpoint = function(line :int,isContextDependentBreakpoint :bool,)
ScriptDebugger.SetGlobal = function(name :string,value :Variant,stackFrame :int,)
ScriptDebugger.SetLocal = function(name :string,value :Variant,stackFrame :int,)
ScriptDebugger.SetUpvalue = function(name :string,value :Variant,stackFrame :int,)
_G.ScriptDocument = {}
ScriptDocument.GetInternalUri = function()
ScriptDocument.GetLine = function(lineIndex :int?)
ScriptDocument.GetLineCount = function()
ScriptDocument.GetScript = function()
ScriptDocument.GetSelectedText = function()
ScriptDocument.GetSelection = function()
ScriptDocument.GetSelectionEnd = function()
ScriptDocument.GetSelectionStart = function()
ScriptDocument.GetText = function(startLine :int?,startCharacter :int?,endLine :int?,endCharacter :int?,)
ScriptDocument.GetViewport = function()
ScriptDocument.HasSelectedText = function()
ScriptDocument.IsCommandBar = function()
ScriptDocument.CloseAsync = function()
ScriptDocument.EditTextAsync = function(newText :string,startLine :int,startCharacter :int,endLine :int,endCharacter :int,)
ScriptDocument.ForceSetSelectionAsync = function(cursorLine :int,cursorCharacter :int,anchorLine :int?,anchorCharacter :int?,)
ScriptDocument.RequestSetSelectionAsync = function(cursorLine :int,cursorCharacter :int,anchorLine :int?,anchorCharacter :int?,)
_G.ScriptEditorService = {}
ScriptEditorService.DeregisterAutocompleteCallback = function(name :string)
ScriptEditorService.DeregisterScriptAnalysisCallback = function(name :string)
ScriptEditorService.FindScriptDocument = function(script :LuaSourceContainer)
ScriptEditorService.ForceReloadSource = function(uri :string,newsrc :string,)
ScriptEditorService.GetEditorSource = function(script :LuaSourceContainer)
ScriptEditorService.GetScriptDocuments = function()
ScriptEditorService.RegisterAutocompleteCallback = function(name :string,priority :int,callbackFunction :Function,)
ScriptEditorService.RegisterScriptAnalysisCallback = function(name :string,priority :int,callbackFunction :Function,)
ScriptEditorService.StripComments = function(code :string)
ScriptEditorService.EditSourceAsyncWithRanges = function(script :LuaSourceContainer,newText :string,startLine :int,startCharacter :int,endLine :int,endCharacter :int,)
ScriptEditorService.OpenScriptDocumentAsync = function(script :LuaSourceContainer)
ScriptEditorService.UpdateSourceAsync = function(script :LuaSourceContainer,callback :Function,)
_G.ScriptProfilerService = {}
ScriptProfilerService.ClientRequestData = function(player :Player)
ScriptProfilerService.ClientStart = function(player :Player,frequency :int?,)
ScriptProfilerService.ClientStop = function(player :Player)
ScriptProfilerService.DeserializeJSON = function(jsonString :string?)
ScriptProfilerService.SaveScriptProfilingData = function(jsonString :string,filename :string,)
ScriptProfilerService.ServerRequestData = function()
ScriptProfilerService.ServerStart = function(frequency :int?)
ScriptProfilerService.ServerStop = function()
_G.ScriptRegistrationService = {}
ScriptRegistrationService.GetSourceContainerByScriptGuid = function(guid :string)
_G.ScriptRuntime = {}
_G.ScriptService = {}
_G.Selection = {}
Selection.SelectionBoxThickness = 0
Selection.SelectionThickness = 0
Selection.Add = function(instancesToAdd :Objects)
Selection.AddFocusCallback = function(priority :int,function :Function,)
Selection.ClearTerrainSelectionHack = function()
Selection.Get = function()
Selection.Remove = function(instancesToRemove :Objects)
Selection.Set = function(selection :Objects)
Selection.SetTerrainSelectionHack = function(center :Vector3,size :Vector3,)
_G.SelectionHighlightManager = {}
_G.SensorBase = {}
SensorBase.Sense = function()
_G.BuoyancySensor = {}
_G.ControllerSensor = {}
_G.ControllerPartSensor = {}
ControllerPartSensor.SearchDistance = 0
_G.ServerScriptService = {}
_G.ServerStorage = {}
_G.ServiceProvider = {}
ServiceProvider.FindService = function(className :string)
ServiceProvider.GetService = function(className :string)
ServiceProvider.getService = function(className :string)
ServiceProvider.service = function(className :string)
_G.DataModel = {}
DataModel.BindToClose = function(function :Function)
DataModel.DefineFastFlag = function(name :string,defaultValue :bool,)
DataModel.DefineFastInt = function(name :string,defaultValue :int,)
DataModel.DefineFastString = function(name :string,defaultValue :string,)
DataModel.GetEngineFeature = function(name :string)
DataModel.GetFastFlag = function(name :string)
DataModel.GetFastInt = function(name :string)
DataModel.GetFastString = function(name :string)
DataModel.GetJobsInfo = function()
DataModel.GetMessage = function()
DataModel.GetObjects = function(url :Content)
DataModel.GetObjectsAllOrNone = function(url :Content,binaryFormatOnly :bool,)
DataModel.GetObjectsList = function(urls :Array)
DataModel.GetPlaySessionId = function()
DataModel.GetRemoteBuildMode = function()
DataModel.IsContentLoaded = function()
DataModel.IsGearTypeAllowed = function(gearType :GearType)
DataModel.IsLoaded = function()
DataModel.IsUniverseMetadataLoaded = function()
DataModel.Load = function(url :Content)
DataModel.OpenScreenshotsFolder = function()
DataModel.OpenVideosFolder = function()
DataModel.ReportInGoogleAnalytics = function(category :string,action :string,label :string,value :int,)
DataModel.SetFastFlagForTesting = function(name :string,newValue :bool,)
DataModel.SetFastIntForTesting = function(name :string,newValue :int,)
DataModel.SetFastStringForTesting = function(name :string,newValue :string,)
DataModel.SetFlagVersion = function(name :string,version :int,)
DataModel.SetIsLoaded = function(value :bool,placeSizeInBytes :int?,)
DataModel.SetPlaceId = function(placeId :int64)
DataModel.SetUniverseId = function(universeId :int64)
DataModel.Shutdown = function()
DataModel.GetObjectsAsync = function(url :Content)
DataModel.HttpGetAsync = function(url :string,httpRequestType :HttpRequestType,)
DataModel.HttpPostAsync = function(url :string,data :string,contentType :string,httpRequestType :HttpRequestType,)
DataModel.InsertObjectsAndJoinIfLegacyAsync = function(url :Content)
DataModel.SavePlace = function(saveFilter :SaveFilter)
_G.GenericSettings = {}
_G.AnalysticsSettings = {}
_G.GlobalSettings = {}
GlobalSettings.GetFFlag = function(name :string)
GlobalSettings.GetFVariable = function(name :string)
_G.UserSettings = {}
UserSettings.IsUserFeatureEnabled = function(name :string)
UserSettings.Reset = function()
UserSettings.SaveState = function()
_G.ServiceVisibilityService = {}
_G.SessionService = {}
SessionService.AcquireContextFocus = function(context :string)
SessionService.GenerateSessionInfoString = function(includeArbitrarySessions :bool,includeTag :bool,includeTimestamps :bool,includeMetadata :bool,)
SessionService.GetCreatedTimestampUtcMs = function(sid :string)
SessionService.GetMetadata = function(sid :string,key :string,)
SessionService.GetRootSID = function()
SessionService.GetSessionTag = function(sid :string)
SessionService.IsContextFocused = function(context :string)
SessionService.ReleaseContextFocus = function(context :string)
SessionService.RemoveMetadata = function(sid :string,key :string,context :string,)
SessionService.RemoveSession = function(sid :string,context :string,)
SessionService.RemoveSessionsWithMetadataKey = function(key :string)
SessionService.ReplaceSession = function(sid :string,tag :string,)
SessionService.SessionExists = function(sid :string)
SessionService.SetMetadata = function(sid :string,key :string,value :Variant,context :string,)
SessionService.SetSession = function(parentSid :string,childSid :string,tag :string,context :string,)
_G.SharedTableRegistry = {}
SharedTableRegistry.GetSharedTable = function(name :string)
SharedTableRegistry.SetSharedTable = function(name :string,st :SharedTable?,)
_G.ShorelineUpgraderService = {}
ShorelineUpgraderService.Cancel = function()
ShorelineUpgraderService.Start = function()
_G.Sky = {}
Sky.MoonAngularSize = 0
Sky.SunAngularSize = 0
_G.Smoke = {}
Smoke.Opacity = 0
Smoke.RiseVelocity = 0
Smoke.Size = 0
Smoke.TimeScale = 0
Smoke.FastForward = function(numFrames :int)
_G.SmoothVoxelsUpgraderService = {}
SmoothVoxelsUpgraderService.Cancel = function()
SmoothVoxelsUpgraderService.Start = function()
_G.SnippetService = {}
_G.SocialService = {}
SocialService.HideSelfView = function()
SocialService.InvokeGameInvitePromptClosed = function(player :Instance,recipientIds :Array,)
SocialService.InvokeIrisInvite = function(player :Instance,tag :string,irisParticipants :Array,)
SocialService.InvokeIrisInvitePromptClosed = function(player :Instance)
SocialService.PromptGameInvite = function(player :Instance,experienceInviteOptions :Instance,)
SocialService.PromptPhoneBook = function(player :Instance,tag :string,)
SocialService.ShowSelfView = function(selfViewPosition :SelfViewPosition)
SocialService.CanSendCallInviteAsync = function(player :Instance)
SocialService.CanSendGameInviteAsync = function(player :Instance,recipientId :int64,)
_G.Sound = {}
Sound.EmitterSize = 0
Sound.MaxDistance = 0
Sound.MinDistance = 0
Sound.Pitch = 0
Sound.PlaybackSpeed = 0
Sound.RollOffGain = 0
Sound.RollOffMaxDistance = 0
Sound.RollOffMinDistance = 0
Sound.Volume = 0
Sound.Pause = function()
Sound.Play = function()
Sound.Resume = function()
Sound.Stop = function()
Sound.pause = function()
Sound.play = function()
Sound.stop = function()
_G.SoundEffect = {}
_G.ChorusSoundEffect = {}
ChorusSoundEffect.Depth = 0
ChorusSoundEffect.Mix = 0
ChorusSoundEffect.Rate = 0
_G.CompressorSoundEffect = {}
CompressorSoundEffect.Attack = 0
CompressorSoundEffect.GainMakeup = 0
CompressorSoundEffect.Ratio = 0
CompressorSoundEffect.Release = 0
CompressorSoundEffect.Threshold = 0
_G.CustomSoundEffect = {}
_G.AssetSoundEffect = {}
_G.ChannelSelectorSoundEffect = {}
_G.DistortionSoundEffect = {}
DistortionSoundEffect.Level = 0
_G.EchoSoundEffect = {}
EchoSoundEffect.Delay = 0
EchoSoundEffect.DryLevel = 0
EchoSoundEffect.Feedback = 0
EchoSoundEffect.WetLevel = 0
_G.EqualizerSoundEffect = {}
EqualizerSoundEffect.HighGain = 0
EqualizerSoundEffect.LowGain = 0
EqualizerSoundEffect.MidGain = 0
_G.FlangeSoundEffect = {}
FlangeSoundEffect.Depth = 0
FlangeSoundEffect.Mix = 0
FlangeSoundEffect.Rate = 0
_G.PitchShiftSoundEffect = {}
PitchShiftSoundEffect.Octave = 0
_G.ReverbSoundEffect = {}
ReverbSoundEffect.DecayTime = 0
ReverbSoundEffect.Density = 0
ReverbSoundEffect.Diffusion = 0
ReverbSoundEffect.DryLevel = 0
ReverbSoundEffect.WetLevel = 0
_G.TremoloSoundEffect = {}
TremoloSoundEffect.Depth = 0
TremoloSoundEffect.Duty = 0
TremoloSoundEffect.Frequency = 0
_G.SoundGroup = {}
SoundGroup.Volume = 0
_G.SoundService = {}
SoundService.DistanceFactor = 0
SoundService.DopplerScale = 0
SoundService.RolloffScale = 0
SoundService.BeginRecording = function()
SoundService.GetInputDevice = function()
SoundService.GetInputDevices = function()
SoundService.GetListener = function()
SoundService.GetOutputDevice = function()
SoundService.GetOutputDevices = function()
SoundService.GetSoundMemoryData = function()
SoundService.PlayLocalSound = function(sound :Instance)
SoundService.SetInputDevice = function(name :string,guid :string,)
SoundService.SetListener = function(listenerType :ListenerType,listener :Tuple,)
SoundService.SetOutputDevice = function(name :string,guid :string,)
SoundService.SetRecordingDevice = function(deviceIndex :int)
SoundService.EndRecording = function()
SoundService.GetRecordingDevices = function()
_G.Sparkles = {}
Sparkles.TimeScale = 0
Sparkles.FastForward = function(numFrames :int)
_G.SpawnerService = {}
_G.StackFrame = {}
_G.StandalonePluginScripts = {}
_G.StarterGear = {}
_G.StarterPack = {}
_G.StarterPlayer = {}
StarterPlayer.CameraMaxZoomDistance = 0
StarterPlayer.CameraMinZoomDistance = 0
StarterPlayer.CharacterJumpHeight = 0
StarterPlayer.CharacterJumpPower = 0
StarterPlayer.CharacterMaxSlopeAngle = 0
StarterPlayer.CharacterWalkSpeed = 0
StarterPlayer.HealthDisplayDistance = 0
StarterPlayer.NameDisplayDistance = 0
StarterPlayer.ClearDefaults = function()
_G.StarterPlayerScripts = {}
_G.StarterCharacterScripts = {}
_G.StartupMessageService = {}
StartupMessageService.GetStartupMessage = function()
_G.Stats = {}
Stats.DataReceiveKbps = 0
Stats.DataSendKbps = 0
Stats.HeartbeatTimeMs = 0
Stats.PhysicsReceiveKbps = 0
Stats.PhysicsSendKbps = 0
Stats.PhysicsStepTimeMs = 0
Stats.GetBrowserTrackerId = function()
Stats.GetMemoryUsageMbForTag = function(tag :DeveloperMemoryTag)
Stats.GetTotalMemoryUsageMb = function()
Stats.GetPaginatedMemoryByTexture = function(queryType :TextureQueryType,pageIndex :int,pageSize :int,)
_G.StatsItem = {}
StatsItem.GetValue = function()
StatsItem.GetValueString = function()
_G.RunningAverageItemDouble = {}
_G.RunningAverageItemInt = {}
_G.RunningAverageTimeIntervalItem = {}
_G.TotalCountTimeIntervalItem = {}
_G.StopWatchReporter = {}
StopWatchReporter.FinishTask = function(taskId :int)
StopWatchReporter.SendReport = function(reportName :string)
StopWatchReporter.StartTask = function(reportName :string,taskName :string,)
_G.StreamingService = {}
StreamingService.GetEphemeralVariable = function(key :string)
StreamingService.GetInstance = function(requestId :string,instanceId :string,)
StreamingService.InvokeCommand = function(requestId :string,commandName :string,arg :Variant,)
StreamingService.RegisterCommand = function(commandName :string,function :Function,)
StreamingService.RegisterContextCollector = function(collectorName :string,function :Function,)
StreamingService.RegisterSequentialCommand = function(commandName :string,function :Function,)
StreamingService.SetEphemeralVariable = function(key :string,value :Variant,timeToLive :int,)
StreamingService.SetPluginInfoCallback = function(function :Function)
StreamingService.UnregisterCommand = function(commandName :string)
StreamingService.UnregisterContextCollector = function(collectorName :string)
StreamingService.ExecuteCommandAsync = function(requestId :string,commandName :string,arg :Variant,)
StreamingService.RunSandboxedCode = function(requestId :string,code :string,)
_G.Studio = {}
Studio["Camera Mouse Wheel Speed"] = 0
Studio["Camera Pan Speed"] = 0
Studio["Camera Shift Speed"] = 0
Studio["Camera Speed"] = 0
Studio.DraggerSoftSnapMarginFactor = 0
Studio.DraggerSummonMarginFactor = 0
Studio.DraggerTiltRotateDuration = 0
Studio["Hover Box Thickness"] = 0
Studio["Line Thickness"] = 0
Studio["Main Volume"] = 0
Studio["Selection Box Thickness"] = 0
Studio.GetAvailableThemes = function()
_G.StudioAssetService = {}
StudioAssetService.ConvertToPackageUpload = function(uploadUrl :string,cloneInstances :Objects,originalInstances :Objects,)
StudioAssetService.FireOnUGCSubmitCompleted = function(cancelled :bool)
StudioAssetService.PublishPackage = function(instance :Instance,publishInfo :Dictionary,)
StudioAssetService.ShowSaveToRoblox = function(instances :Objects,assetType :Variant,hasSubsequent :bool,)
StudioAssetService.UpdatePublishedPackage = function(assetmetadata :Dictionary,rootInstance :Instance,isConvert :bool,addUndoWaypoint :bool,)
StudioAssetService.DEPRECATED_SerializeInstances = function(instances :Objects)
StudioAssetService.RequestAvatarAutosetupAsync = function(meshId :Content,textureId :Content,progressCallback :Function,)
StudioAssetService.SerializeInstances = function(instances :Objects,groupId :int64,isPackage :bool,)
_G.StudioAttachment = {}
_G.StudioCallout = {}
StudioCallout.SetOnNextClicked = function(onClick :Function)
_G.StudioData = {}
_G.StudioDeviceEmulatorService = {}
StudioDeviceEmulatorService.GetMaxNumTouches = function()
StudioDeviceEmulatorService.GetTouchInBounds = function(index :int)
StudioDeviceEmulatorService.GetTouchPosition = function(index :int)
StudioDeviceEmulatorService.EmulatePCDeviceWithResolution = function(deviceId :string,resolution :Vector2,)
StudioDeviceEmulatorService.GetCurrentDeviceId = function()
StudioDeviceEmulatorService.GetCurrentOrientation = function()
StudioDeviceEmulatorService.HasDeviceWithId = function(deviceId :string)
StudioDeviceEmulatorService.SendGamepadEvent = function(deviceId :int,keyCode :KeyCode,position :Vector3,rotation :Vector3,)
StudioDeviceEmulatorService.SetCurrentDeviceId = function(deviceId :string)
StudioDeviceEmulatorService.SetCurrentOrientation = function(orientation :ScreenOrientation)
_G.StudioObjectBase = {}
_G.StudioWidget = {}
StudioWidget.SetFixedSize = function(width :int,height :int,)
_G.StudioPublishService = {}
StudioPublishService.ClearUploadNames = function()
StudioPublishService.GetLocalFilePath = function()
StudioPublishService.GetPlaceDisplayName = function()
StudioPublishService.PublishAs = function(universeId :int64,placeId :int64,groupId :int64,isPublish :bool,publishParameters :Variant,willRetryOnConflict :bool,allowOpeningNewPlace :bool,)
StudioPublishService.PublishThenTurnOnTeamCreate = function()
StudioPublishService.RefreshDocumentDisplayName = function()
StudioPublishService.SetTeamCreateOnPublishInfo = function(shouldTurnOnTcOnPublish :bool,newPlaceName :string,)
StudioPublishService.SetUniverseDisplayName = function(newName :string)
StudioPublishService.SetUploadNames = function(placeName :string,universeName :string,)
StudioPublishService.ShowSaveOrPublishPlaceToRoblox = function(showGameSelect :bool,isPublish :bool,closeMode :StudioCloseMode,)
_G.StudioScriptDebugEventListener = {}
_G.StudioSdkService = {}
StudioSdkService.GetSdk = function()
StudioSdkService.SetSdk = function(sdk :Instance)
_G.StudioService = {}
StudioService.GridSize = 0
StudioService.RotateIncrement = 0
StudioService.AnimationIdSelected = function(id :int64)
StudioService.CopyToClipboard = function(stringToCopy :string)
StudioService.GetBadgeConfigureUrl = function(badgeId :int64)
StudioService.GetBadgeUploadUrl = function()
StudioService.GetClassIcon = function(className :string)
StudioService.GetPlaceIsPersistedToCloud = function()
StudioService.GetResourceByCategory = function(category :string)
StudioService.GetStartupAssetId = function()
StudioService.GetStartupPluginId = function()
StudioService.GetTermsOfUseUrl = function()
StudioService.GetUserId = function()
StudioService.GizmoRaycast = function(origin :Vector3,direction :Vector3,raycastParams :RaycastParams,)
StudioService.HasInternalPermission = function()
StudioService.IsPluginInstalled = function(assetId :int64)
StudioService.IsPluginUpToDate = function(assetId :int64,currentAssetVersion :int64,)
StudioService.OpenInBrowser_DONOTUSE = function(url :string)
StudioService.RequestClose = function(closeMode :StudioCloseMode)
StudioService.SetPluginEnabled = function(assetId :int64,state :bool,)
StudioService.ShowPlaceVersionHistoryDialog = function(placeId :int64)
StudioService.ShowPublishToRoblox = function()
StudioService.UninstallPlugin = function(assetId :int64)
StudioService.UpdatePluginManagement = function()
StudioService.PromptImportFile = function(fileTypeFilter :Array)
StudioService.PromptImportFiles = function(fileTypeFilter :Array)
StudioService.TryInstallPlugin = function(assetId :int64,assetVersionId :int64,)
_G.StudioTheme = {}
StudioTheme.GetColor = function(styleguideitem :StudioStyleGuideColor,modifier :StudioStyleGuideModifier,)
_G.StudioWidgetsService = {}
StudioWidgetsService.ApplyFillInBox = function(target :StudioWidget)
StudioWidgetsService.ApplyHighlight = function(target :StudioWidget,rowName :string?,)
StudioWidgetsService.ApplyShadows = function()
StudioWidgetsService.ApplySpotlight = function(target :StudioWidget,rowName :string?,)
StudioWidgetsService.AttachPluginGui = function(target :StudioWidget,gui :PluginGui,attachment :StudioAttachment,)
StudioWidgetsService.GetWidgetFromLabel = function(label :string)
StudioWidgetsService.GetWidgetFromPluginGui = function(gui :PluginGui)
StudioWidgetsService.HideSpotlight = function()
_G.StyleBase = {}
StyleBase.GetStyleRules = function()
StyleBase.InsertStyleRule = function(rule :StyleRule,index :int?,)
StyleBase.SetStyleRules = function(rules :Objects)
_G.StyleRule = {}
StyleRule.GetProperties = function()
StyleRule.GetPropertiesResolved = function()
StyleRule.GetProperty = function(name :string)
StyleRule.GetPropertyResolved = function(name :string)
StyleRule.SetProperties = function(table :Dictionary)
StyleRule.SetProperty = function(name :string,value :Variant,)
_G.StyleSheet = {}
StyleSheet.GetDerives = function()
StyleSheet.SetDerives = function(derives :Objects)
_G.StyleDerive = {}
_G.StyleLink = {}
_G.StylingService = {}
StylingService.GetAppliedStyles = function(instance :Instance)
StylingService.GetStyleInfo = function(style :StyleRule)
StylingService.GetStyleSheetDerivesChain = function(styleSheet :StyleSheet)
StylingService.GetStyleSheetInfo = function(styleSheet :StyleSheet)
_G.SurfaceAppearance = {}
_G.TaskScheduler = {}
_G.Team = {}
Team.GetPlayers = function()
_G.TeamCreateData = {}
_G.TeamCreatePublishService = {}
_G.TeamCreateService = {}
TeamCreateService.CloseGameIfUserDoesntHavePerms = function()
_G.Teams = {}
Teams.GetTeams = function()
Teams.RebalanceTeams = function()
_G.TeleportAsyncResult = {}
_G.TeleportOptions = {}
TeleportOptions.GetTeleportData = function()
TeleportOptions.SetTeleportData = function(teleportData :Variant)
_G.TeleportService = {}
TeleportService.Block = function()
TeleportService.GetArrivingTeleportGui = function()
TeleportService.GetLocalPlayerTeleportData = function()
TeleportService.GetTeleportSetting = function(setting :string)
TeleportService.SetTeleportGui = function(gui :Instance)
TeleportService.SetTeleportSetting = function(setting :string,value :Variant,)
TeleportService.Teleport = function(placeId :int64,player :Instance,teleportData :Variant,customLoadingScreen :Instance,)
TeleportService.TeleportCancel = function()
TeleportService.TeleportToPlaceInstance = function(placeId :int64,instanceId :string,player :Instance,spawnName :string,teleportData :Variant,customLoadingScreen :Instance,)
TeleportService.TeleportToPrivateServer = function(placeId :int64,reservedServerAccessCode :string,players :Objects,spawnName :string,teleportData :Variant,customLoadingScreen :Instance,)
TeleportService.TeleportToSpawnByName = function(placeId :int64,spawnName :string,player :Instance,teleportData :Variant,customLoadingScreen :Instance,)
TeleportService.GetPlayerPlaceInstanceAsync = function(userId :int64)
TeleportService.ReserveServer = function(placeId :int64)
TeleportService.TeleportAsync = function(placeId :int64,players :Objects,teleportOptions :Instance,)
TeleportService.TeleportPartyAsync = function(placeId :int64,players :Objects,teleportData :Variant,customLoadingScreen :Instance,)
TeleportService.UnblockAsync = function()
_G.TemporaryCageMeshProvider = {}
_G.TemporaryScriptService = {}
_G.TerrainDetail = {}
TerrainDetail.StudsPerTile = 0
_G.TerrainRegion = {}
TerrainRegion.ApplyTransform = function(rotation :CFrame,size :Vector3,)
TerrainRegion.ApplyTransformSubregion = function(rotation :CFrame,size :Vector3,region :Region3int16,)
TerrainRegion.ConvertToSmooth = function()
TerrainRegion.GetRegionWireframe = function()
_G.TestService = {}
TestService.Check = function(condition :bool,description :string,source :Instance,line :int,)
TestService.Checkpoint = function(text :string,source :Instance,line :int,)
TestService.Done = function()
TestService.Error = function(description :string,source :Instance,line :int,)
TestService.Fail = function(description :string,source :Instance,line :int,)
TestService.Message = function(text :string,source :Instance,line :int,)
TestService.Require = function(condition :bool,description :string,source :Instance,line :int,)
TestService.ScopeTime = function()
TestService.Warn = function(condition :bool,description :string,source :Instance,line :int,)
TestService.isFeatureEnabled = function(name :string)
TestService.Run = function()
_G.TextBoxService = {}
_G.TextChannel = {}
TextChannel.DisplaySystemMessage = function(systemMessage :string,metadata :string,)
TextChannel.AddUserAsync = function(userId :int64)
TextChannel.SendAsync = function(message :string,metadata :string,)
_G.TextChatCommand = {}
_G.TextChatConfigurations = {}
_G.BubbleChatConfiguration = {}
BubbleChatConfiguration.BubbleDuration = 0
BubbleChatConfiguration.BubblesSpacing = 0
BubbleChatConfiguration.MaxBubbles = 0
BubbleChatConfiguration.MaxDistance = 0
BubbleChatConfiguration.MinimizeDistance = 0
BubbleChatConfiguration.VerticalStudsOffset = 0
_G.ChatInputBarConfiguration = {}
_G.ChatWindowConfiguration = {}
ChatWindowConfiguration.HeightScale = 0
ChatWindowConfiguration.WidthScale = 0
_G.TextChatMessage = {}
_G.TextChatMessageProperties = {}
_G.TextChatService = {}
TextChatService.DisplayBubble = function(partOrCharacter :Instance,message :string,)
TextChatService.CanUserChatAsync = function(userId :int64)
TextChatService.CanUsersChatAsync = function(userIdFrom :int64,userIdTo :int64,)
_G.TextFilterResult = {}
TextFilterResult.GetChatForUserAsync = function(toUserId :int64)
TextFilterResult.GetNonChatStringForBroadcastAsync = function()
TextFilterResult.GetNonChatStringForUserAsync = function(toUserId :int64)
_G.TextFilterTranslatedResult = {}
TextFilterTranslatedResult.GetTranslationForLocale = function(locale :string)
TextFilterTranslatedResult.GetTranslations = function()
_G.TextService = {}
TextService.GetFontMemoryData = function()
TextService.GetTextSize = function(string :string,fontSize :int,font :Font,frameSize :Vector2,)
TextService.SetResolutionScale = function(scale :float)
TextService.FilterAndTranslateStringAsync = function(stringToFilter :string,fromUserId :int64,targetLocales :Array,textContext :TextFilterContext,)
TextService.FilterStringAsync = function(stringToFilter :string,fromUserId :int64,textContext :TextFilterContext,)
TextService.GetFamilyInfoAsync = function(assetId :Content)
TextService.GetTextBoundsAsync = function(params :GetTextBoundsParams)
_G.TextSource = {}
_G.TextureGenerationPartGroup = {}
TextureGenerationPartGroup.GetInstances = function()
TextureGenerationPartGroup.GetMeshIdsHash = function()
_G.TextureGenerationService = {}
TextureGenerationService.CancelGenerationRequest = function(jobUuid :string)
TextureGenerationService.CreatePartGroup = function(instances :Objects)
TextureGenerationService.GenerateTexture = function(previewJobId :string)
TextureGenerationService.PreviewTexture = function(partGroup :TextureGenerationPartGroup,prompt :string,options :Dictionary,)
TextureGenerationService.GetQuotasAsync = function()
_G.TextureGenerationUnwrappingRequest = {}
TextureGenerationUnwrappingRequest.ApplyToDataModel = function(partGroup :TextureGenerationPartGroup)
TextureGenerationUnwrappingRequest.GetPartGroup = function()
_G.ThirdPartyUserService = {}
ThirdPartyUserService.GetUserPlatformId = function()
ThirdPartyUserService.GetUserPlatformName = function()
ThirdPartyUserService.HaveActiveUser = function()
ThirdPartyUserService.IsOver13 = function()
ThirdPartyUserService.ReturnToEngagement = function()
ThirdPartyUserService.ShowAccountPicker = function()
ThirdPartyUserService.RegisterActiveUser = function(gamepadId :UserInputType)
_G.ThreadState = {}
ThreadState.GetFrame = function(index :int)
_G.TimerService = {}
_G.ToastNotificationService = {}
ToastNotificationService.HideNotification = function(notificationId :string)
ToastNotificationService.ShowNotification = function(message :string,notificationId :string,)
_G.TouchInputService = {}
_G.TouchTransmitter = {}
_G.TracerService = {}
TracerService.FinishSpan = function(spanId :string)
TracerService.StartSpan = function(name :string,parentId :string,)
_G.TrackerLodController = {}
TrackerLodController.getExtrapolation = function()
TrackerLodController.getVideoLod = function()
TrackerLodController.isAudioEnabled = function()
TrackerLodController.isVideoEnabled = function()
_G.TrackerStreamAnimation = {}
_G.Trail = {}
Trail.Brightness = 0
Trail.Lifetime = 0
Trail.LightEmission = 0
Trail.LightInfluence = 0
Trail.MaxLength = 0
Trail.MinLength = 0
Trail.TextureLength = 0
Trail.Clear = function()
_G.Translator = {}
Translator.FormatByKey = function(key :string,args :Variant,)
Translator.RobloxOnlyTranslate = function(context :Instance,text :string,)
Translator.Translate = function(context :Instance,text :string,)
_G.TutorialService = {}
TutorialService.GetMainViewSessionId = function()
TutorialService.GetStudioWidgetFromLabel = function(label :string)
TutorialService.GetTutorialIDToLaunch = function()
TutorialService.HasUserCompletedTutorial = function()
TutorialService.HideWidgets = function(commaSeparatedNames :string)
TutorialService.PromptClosePlace = function()
TutorialService.SetTutorialCompletionStatus = function(completed :bool)
TutorialService.ShouldLaunchTutorial = function()
TutorialService.ShowWidgets = function(commaSeparatedNames :string)
_G.TweenBase = {}
TweenBase.Cancel = function()
TweenBase.Pause = function()
TweenBase.Play = function()
_G.Tween = {}
_G.TweenService = {}
TweenService.Create = function(instance :Instance,tweenInfo :TweenInfo,propertyTable :Dictionary,)
TweenService.GetValue = function(alpha :float,easingStyle :EasingStyle,easingDirection :EasingDirection,)
_G.UGCAvatarService = {}
_G.UGCValidationService = {}
UGCValidationService.CalculateEditableMeshUniqueUVCount = function(editableMesh :EditableMesh)
UGCValidationService.CheckEditableMeshInCameraFrustum = function(editableMesh :EditableMesh,meshScale :Vector3,handleWorldCF :CFrame,cameraWorldCF :CFrame,)
UGCValidationService.GetDynamicHeadEditableMeshInactiveControls = function(editableMesh :EditableMesh,controlNames :Array,)
UGCValidationService.GetEditableImageSize = function(editableImage :EditableImage)
UGCValidationService.GetEditableMeshTriCount = function(editableMesh :EditableMesh)
UGCValidationService.GetEditableMeshVertColors = function(editableMesh :EditableMesh)
UGCValidationService.GetEditableMeshVerts = function(editableMesh :EditableMesh)
UGCValidationService.GetPropertyValue = function(instance :Instance,property :string,)
UGCValidationService.RegisterUGCValidationFunction = function(setFunction :Function)
UGCValidationService.ResetCollisionFidelity = function(meshPart :Instance,collisionFidelity :CollisionFidelity,)
UGCValidationService.ResetCollisionFidelityWithEditableMeshDataLua = function(meshPart :MeshPart,editableMesh :EditableMesh,collisionFidelity :CollisionFidelity,)
UGCValidationService.SetMeshIdBlocking = function(meshPart :Instance,meshId :string,)
UGCValidationService.ValidateDynamicHeadEditableMesh = function(editableMesh :EditableMesh)
UGCValidationService.ValidateEditableImageNumTextureChannels = function(editableImage :EditableImage,numTextureChannelsRequired :int,)
UGCValidationService.ValidateEditableImageSize = function(editableImage :EditableImage)
UGCValidationService.ValidateEditableMeshBounds = function(editableMesh :EditableMesh,meshScale :Vector3,boundsOffset :Vector3,attachmentCF :CFrame,handleCF :CFrame,)
UGCValidationService.ValidateEditableMeshCageMeshIntersection = function(innerCage :EditableMesh,outerCage :EditableMesh,refMesh :EditableMesh,)
UGCValidationService.ValidateEditableMeshCageNonManifoldAndHoles = function(editableMesh :EditableMesh)
UGCValidationService.ValidateEditableMeshCageUVCoincident = function(editableMesh :EditableMesh)
UGCValidationService.ValidateEditableMeshCageUVTriangleArea = function(editableMesh :EditableMesh)
UGCValidationService.ValidateEditableMeshFullBodyCageDeletion = function(editableMesh :EditableMesh)
UGCValidationService.ValidateEditableMeshMisMatchUV = function(innerCage :EditableMesh,outerCage :EditableMesh,)
UGCValidationService.ValidateEditableMeshOverlappingVertices = function(editableMesh :EditableMesh)
UGCValidationService.ValidateEditableMeshTriangleArea = function(editableMesh :EditableMesh)
UGCValidationService.ValidateEditableMeshTriangles = function(editableMesh :EditableMesh)
UGCValidationService.ValidateEditableMeshUVSpace = function(editableMesh :EditableMesh)
UGCValidationService.ValidateEditableMeshUVValuesInReference = function(referenceValues :Array,editableMesh :EditableMesh,)
UGCValidationService.ValidateEditableMeshUniqueUVCount = function(editableMesh :EditableMesh,numRequired :int,)
UGCValidationService.ValidateEditableMeshVertColors = function(editableMesh :EditableMesh,includeAlpha :bool,)
UGCValidationService.ValidateSkinnedEditableMesh = function(editableMesh :EditableMesh)
UGCValidationService.CalculateUniqueUVCount = function(meshId :string)
UGCValidationService.CanLoadAsset = function(assetId :string)
UGCValidationService.CheckMeshInCameraFrustum = function(meshId :string,meshScale :Vector3,handleWorldCF :CFrame,cameraWorldCF :CFrame,)
UGCValidationService.CompareTextureOverlapByteString = function(byteStringBaseline :string,byteStringFollowup :string,)
UGCValidationService.CompareTextureOverlapTextureId = function(textureIdBaseline :string,textureIdFollowup :string,)
UGCValidationService.FetchAssetWithFormat = function(url :Content,assetFormat :string,)
UGCValidationService.GetDynamicHeadMeshInactiveControls = function(meshId :string,controlNames :Array,)
UGCValidationService.GetMeshTriCount = function(meshId :string)
UGCValidationService.GetMeshVertColors = function(meshId :string)
UGCValidationService.GetMeshVerts = function(meshId :string)
UGCValidationService.GetTextureSize = function(textureId :string)
UGCValidationService.ValidateCageMeshIntersection = function(innerCageMeshId :string,outerCageMeshId :string,refMeshId :string,)
UGCValidationService.ValidateCageNonManifoldAndHoles = function(meshId :string)
UGCValidationService.ValidateCageUVCoincident = function(meshId :string)
UGCValidationService.ValidateCageUVTriangleArea = function(meshId :string)
UGCValidationService.ValidateDynamicHeadMesh = function(meshId :string)
UGCValidationService.ValidateFullBodyCageDeletion = function(meshId :string)
UGCValidationService.ValidateImageTransparencyThresholdByteString = function(image :string,threshold :float,)
UGCValidationService.ValidateImageTransparencyThresholdTextureID = function(textureId :string,threshold :float,)
UGCValidationService.ValidateMeshBounds = function(meshId :string,meshScale :Vector3,boundsOffset :Vector3,attachmentCF :CFrame,handleCF :CFrame,)
UGCValidationService.ValidateMeshTriangleArea = function(meshId :string)
UGCValidationService.ValidateMeshTriangles = function(meshId :string)
UGCValidationService.ValidateMeshVertColors = function(meshId :string,includeAlpha :bool,)
UGCValidationService.ValidateMisMatchUV = function(innerCageMeshId :string,outerCageMeshId :string,)
UGCValidationService.ValidateNumTextureChannels = function(textureId :string,numChannelsRequired :int,)
UGCValidationService.ValidateOverlappingVertices = function(meshId :string)
UGCValidationService.ValidateSkinnedMesh = function(meshId :string)
UGCValidationService.ValidateTextureAlpha = function(textureId :string,pixelWidth :int,)
UGCValidationService.ValidateTextureAlphaByteString = function(byteString :string,pixelWidth :int,)
UGCValidationService.ValidateTextureSize = function(textureId :string)
UGCValidationService.ValidateUVSpace = function(meshId :string)
UGCValidationService.ValidateUVValuesInReference = function(referenceValues :Array,meshId :string,)
UGCValidationService.ValidateUniqueUVCount = function(meshId :string,numRequired :int,)
_G.UIBase = {}
_G.UIComponent = {}
_G.UIConstraint = {}
_G.UIAspectRatioConstraint = {}
UIAspectRatioConstraint.AspectRatio = 0
_G.UISizeConstraint = {}
_G.UITextSizeConstraint = {}
_G.UICorner = {}
_G.UIFlexItem = {}
UIFlexItem.GrowRatio = 0
UIFlexItem.ShrinkRatio = 0
_G.UIGradient = {}
UIGradient.Rotation = 0
_G.UILayout = {}
_G.UIGridStyleLayout = {}
UIGridStyleLayout.ApplyLayout = function()
UIGridStyleLayout.SetCustomSortFunction = function(function :Function)
_G.UIGridLayout = {}
_G.UIListLayout = {}
_G.UIPageLayout = {}
UIPageLayout.TweenTime = 0
UIPageLayout.JumpTo = function(page :Instance)
UIPageLayout.JumpToIndex = function(index :int)
UIPageLayout.Next = function()
UIPageLayout.Previous = function()
_G.UITableLayout = {}
_G.UIPadding = {}
_G.UIScale = {}
UIScale.Scale = 0
_G.UIStroke = {}
UIStroke.Thickness = 0
UIStroke.Transparency = 0
_G.UnvalidatedAssetService = {}
UnvalidatedAssetService.AppendTempAssetId = function(userId :int64,id :int64,lookAt :Vector3,camPos :Vector3,usage :string,)
UnvalidatedAssetService.AppendVantagePoint = function(userId :int64,id :int64,lookAt :Vector3,camPos :Vector3,)
UnvalidatedAssetService.UpgradeTempAssetId = function(userId :int64,tempId :int64,assetId :int64,)
_G.UserGameSettings = {}
UserGameSettings.GamepadCameraSensitivity = 0
UserGameSettings.MasterVolume = 0
UserGameSettings.MasterVolumeStudio = 0
UserGameSettings.MouseSensitivity = 0
UserGameSettings.PlayerHeight = 0
UserGameSettings.PreferredTransparency = 0
UserGameSettings.GetCameraYInvertValue = function()
UserGameSettings.GetOnboardingCompleted = function(onboardingId :string)
UserGameSettings.GetTutorialState = function(tutorialId :string)
UserGameSettings.InFullScreen = function()
UserGameSettings.InStudioMode = function()
UserGameSettings.ResetOnboardingCompleted = function(onboardingId :string)
UserGameSettings.SetCameraYInvertVisible = function()
UserGameSettings.SetGamepadCameraSensitivityVisible = function()
UserGameSettings.SetOnboardingCompleted = function(onboardingId :string)
UserGameSettings.SetTutorialState = function(tutorialId :string,value :bool,)
_G.UserInputService = {}
UserInputService.MouseDeltaSensitivity = 0
UserInputService.GamepadSupports = function(gamepadNum :UserInputType,gamepadKeyCode :KeyCode,)
UserInputService.GetConnectedGamepads = function()
UserInputService.GetDeviceAcceleration = function()
UserInputService.GetDeviceGravity = function()
UserInputService.GetDeviceRotation = function()
UserInputService.GetDeviceType = function()
UserInputService.GetFocusedTextBox = function()
UserInputService.GetGamepadConnected = function(gamepadNum :UserInputType)
UserInputService.GetGamepadState = function(gamepadNum :UserInputType)
UserInputService.GetImageForKeyCode = function(keyCode :KeyCode)
UserInputService.GetKeysPressed = function()
UserInputService.GetLastInputType = function()
UserInputService.GetMouseButtonsPressed = function()
UserInputService.GetMouseDelta = function()
UserInputService.GetMouseLocation = function()
UserInputService.GetNavigationGamepads = function()
UserInputService.GetPlatform = function()
UserInputService.GetStringForKeyCode = function(keyCode :KeyCode)
UserInputService.GetSupportedGamepadKeyCodes = function(gamepadNum :UserInputType)
UserInputService.GetUserCFrame = function(type :UserCFrame)
UserInputService.IsGamepadButtonDown = function(gamepadNum :UserInputType,gamepadKeyCode :KeyCode,)
UserInputService.IsKeyDown = function(keyCode :KeyCode)
UserInputService.IsMouseButtonPressed = function(mouseButton :UserInputType)
UserInputService.IsNavigationGamepad = function(gamepadEnum :UserInputType)
UserInputService.RecenterUserHeadCFrame = function()
UserInputService.SendAppUISizes = function(statusBarSize :Vector2,navBarSize :Vector2,bottomBarSize :Vector2,rightBarSize :Vector2,)
UserInputService.SetNavigationGamepad = function(gamepadEnum :UserInputType,enabled :bool,)
_G.UserService = {}
UserService.GetUserInfosByUserIdsAsync = function(userIds :Array)
_G.VRService = {}
VRService.LaserDistance = 0
VRService.QuestDisplayRefreshRate = 0
VRService.GetTouchpadMode = function(pad :VRTouchpad)
VRService.GetUserCFrame = function(type :UserCFrame)
VRService.GetUserCFrameEnabled = function(type :UserCFrame)
VRService.IsMaquettes = function()
VRService.IsVRAppBuild = function()
VRService.RecenterUserHeadCFrame = function()
VRService.RequestNavigation = function(cframe :CFrame,inputUserCFrame :UserCFrame,)
VRService.SetTouchpadMode = function(pad :VRTouchpad,mode :VRTouchpadMode,)
_G.VRStatusService = {}
_G.ValueBase = {}
_G.BinaryStringValue = {}
_G.BoolValue = {}
_G.BrickColorValue = {}
_G.CFrameValue = {}
_G.Color3Value = {}
_G.DoubleConstrainedValue = {}
_G.IntConstrainedValue = {}
_G.IntValue = {}
_G.NumberValue = {}
_G.ObjectValue = {}
_G.RayValue = {}
_G.StringValue = {}
_G.Vector3Value = {}
_G.Vector3Curve = {}
Vector3Curve.GetValueAtTime = function(time :float)
Vector3Curve.X = function()
Vector3Curve.Y = function()
Vector3Curve.Z = function()
_G.VersionControlService = {}
_G.VideoCaptureService = {}
VideoCaptureService.GetCameraDevices = function()
_G.VideoDeviceInput = {}
_G.VideoService = {}
_G.VirtualInputManager = {}
VirtualInputManager.Dump = function()
VirtualInputManager.HandleGamepadAxisInput = function(objectId :int,keyCode :KeyCode,x :float,y :float,z :float,)
VirtualInputManager.HandleGamepadButtonInput = function(deviceId :int,keyCode :KeyCode,buttonState :int,)
VirtualInputManager.HandleGamepadConnect = function(deviceId :int)
VirtualInputManager.HandleGamepadDisconnect = function(deviceId :int)
VirtualInputManager.SendAccelerometerEvent = function(x :float,y :float,z :float,)
VirtualInputManager.SendGravityEvent = function(x :float,y :float,z :float,)
VirtualInputManager.SendGyroscopeEvent = function(quatX :float,quatY :float,quatZ :float,quatW :float,)
VirtualInputManager.SendKeyEvent = function(isPressed :bool,keyCode :KeyCode,isRepeatedKey :bool,layerCollector :Instance,)
VirtualInputManager.SendMouseButtonEvent = function(x :int,y :int,mouseButton :int,isDown :bool,layerCollector :Instance,repeatCount :int,)
VirtualInputManager.SendMouseMoveEvent = function(x :float,y :float,layerCollector :Instance,)
VirtualInputManager.SendMouseWheelEvent = function(x :float,y :float,isForwardScroll :bool,layerCollector :Instance,)
VirtualInputManager.SendTextInputCharacterEvent = function(str :string,layerCollector :Instance,)
VirtualInputManager.SendTouchEvent = function(touchId :int64,state :int,x :float,y :float,)
VirtualInputManager.SetInputTypesToIgnore = function(inputTypesToIgnore :Variant)
VirtualInputManager.StartPlaying = function(fileName :string)
VirtualInputManager.StartPlayingJSON = function(string :string)
VirtualInputManager.StartRecording = function()
VirtualInputManager.StopPlaying = function()
VirtualInputManager.StopRecording = function()
VirtualInputManager.sendRobloxEvent = function(namespace :string,detail :string,detailType :string,)
VirtualInputManager.sendThemeChangeEvent = function(themeName :string)
VirtualInputManager.WaitForInputEventsProcessed = function()
_G.VirtualUser = {}
VirtualUser.Button1Down = function(position :Vector2,camera :CFrame,)
VirtualUser.Button1Up = function(position :Vector2,camera :CFrame,)
VirtualUser.Button2Down = function(position :Vector2,camera :CFrame,)
VirtualUser.Button2Up = function(position :Vector2,camera :CFrame,)
VirtualUser.CaptureController = function()
VirtualUser.ClickButton1 = function(position :Vector2,camera :CFrame,)
VirtualUser.ClickButton2 = function(position :Vector2,camera :CFrame,)
VirtualUser.MoveMouse = function(position :Vector2,camera :CFrame,)
VirtualUser.SetKeyDown = function(key :string)
VirtualUser.SetKeyUp = function(key :string)
VirtualUser.StartRecording = function()
VirtualUser.StopRecording = function()
VirtualUser.TypeKey = function(key :string)
_G.VisibilityCheckDispatcher = {}
_G.Visit = {}
_G.VisualizationMode = {}
_G.VisualizationModeCategory = {}
_G.VisualizationModeService = {}
_G.VoiceChatInternal = {}
VoiceChatInternal.GetAndClearCallFailureMessage = function()
VoiceChatInternal.GetAudioProcessingSettings = function()
VoiceChatInternal.GetChannelId = function()
VoiceChatInternal.GetGroupId = function()
VoiceChatInternal.GetMicDevices = function()
VoiceChatInternal.GetParticipants = function()
VoiceChatInternal.GetSessionId = function()
VoiceChatInternal.GetSpeakerDevices = function()
VoiceChatInternal.GetVoiceChatApiVersion = function()
VoiceChatInternal.GetVoiceChatAvailable = function()
VoiceChatInternal.GetVoiceExperienceId = function()
VoiceChatInternal.IsContextVoiceEnabled = function()
VoiceChatInternal.IsPublishPaused = function()
VoiceChatInternal.IsSubscribePaused = function(userId :int64)
VoiceChatInternal.JoinByGroupId = function(groupId :string,isMicMuted :bool,)
VoiceChatInternal.JoinByGroupIdToken = function(groupId :string,isMicMuted :bool,isRetry :bool,)
VoiceChatInternal.Leave = function()
VoiceChatInternal.LogPublisherWebRTCStats = function()
VoiceChatInternal.LogSubscriptionWebRTCStats = function()
VoiceChatInternal.PublishPause = function(paused :bool)
VoiceChatInternal.SetMicDevice = function(micDeviceName :string,micDeviceGuid :string,)
VoiceChatInternal.SetSpeakerDevice = function(speakerDeviceName :string,speakerDeviceGuid :string,)
VoiceChatInternal.SubscribeBlock = function(userId :int64)
VoiceChatInternal.SubscribePause = function(userId :int64,paused :bool,)
VoiceChatInternal.SubscribePauseAll = function(paused :bool)
VoiceChatInternal.SubscribeRetry = function(userId :int64)
VoiceChatInternal.SubscribeUnblock = function(userId :int64)
VoiceChatInternal.IsVoiceEnabledForUserIdAsync = function(userId :int64)
_G.VoiceChatService = {}
VoiceChatService.IsVoiceEnabledForUserIdAsync = function(userId :int64)
_G.WeldConstraint = {}
_G.Wire = {}